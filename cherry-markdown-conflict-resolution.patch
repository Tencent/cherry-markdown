From 47c268ca75ab8fe26d38e1afd44c3034733b842b Mon Sep 17 00:00:00 2001
From: "copilot-swe-agent[bot]" <198982749+Copilot@users.noreply.github.com>
Date: Thu, 14 Aug 2025 07:14:18 +0000
Subject: [PATCH 1/2] Integrate scatter chart and new chart configuration
 syntax from both PRs

Co-authored-by: RSS1102 <81673017+RSS1102@users.noreply.github.com>
---
 examples/assets/markdown/basic.md             |   86 +-
 examples/assets/scripts/index-demo.js         |   14 +-
 .../advance/cherry-table-echarts-plugin.js    |  730 +++++++-
 .../cherry-table-echarts-plugin.js.backup     | 1608 +++++++++++++++++
 .../cherry-markdown/src/core/hooks/Table.js   |   40 +-
 .../src/toolbars/hooks/ProTable.js            |   14 +-
 6 files changed, 2420 insertions(+), 72 deletions(-)
 create mode 100644 packages/cherry-markdown/src/addons/advance/cherry-table-echarts-plugin.js.backup

diff --git a/examples/assets/markdown/basic.md b/examples/assets/markdown/basic.md
index 317ff44..27aa625 100644
--- a/examples/assets/markdown/basic.md
+++ b/examples/assets/markdown/basic.md
@@ -499,7 +499,7 @@ $$
 
 **示例（折线图）**
 ```markdown
-| :line:{x,y} | Header1 | Header2 | Header3 | Header4 |
+| :line:{title: 折线图,} | Header1 | Header2 | Header3 | Header4 |
 | ------ | ------ | ------ | ------ | ------ |
 | Sample1 | 11 | 11 | 4 | 33 |
 | Sample2 | 112 | 111 | 22 | 222 |
@@ -507,7 +507,7 @@ $$
 ```
 
 **效果**
-| :line:{x,y} | Header1 | Header2 | Header3 | Header4 |
+| :line:{title: 折线图,} | Header1 | Header2 | Header3 | Header4 |
 | ------ | ------ | ------ | ------ | ------ |
 | Sample1 | 11 | 11 | 4 | 33 |
 | Sample2 | 112 | 111 | 22 | 222 |
@@ -515,7 +515,7 @@ $$
 
 **示例（柱状图）**
 ```markdown
-| :bar:{y,x} | Header1 | Header2 | Header3 | Header4 |
+| :bar:{title: 柱状图,} | Header1 | Header2 | Header3 | Header4 |
 | ------ | ------ | ------ | ------ | ------ |
 | Sample1 | 11 | 11 | 4 | 33 |
 | Sample2 | 112 | 111 | 22 | 222 |
@@ -523,15 +523,49 @@ $$
 ```
 
 **效果**
-| :bar:{y,x} | Header1 | Header2 | Header3 | Header4 |
+| :bar:{title: 柱状图,} | Header1 | Header2 | Header3 | Header4 |
 | ------ | ------ | ------ | ------ | ------ |
 | Sample1 | 11 | 11 | 4 | 33 |
 | Sample2 | 112 | 111 | 22 | 222 |
 | Sample3 | 333 | 142 | 311 | 11 |
 
+**示例（热力图）**
+```markdown
+| :heatmap:{title: 热力图,} | 周一 | 周二 | 周三 | 周四 | 周五 |
+| ------ | ------ | ------ | ------ | ------ | ------ |
+| 上午 | 10 | 20 | 30 | 40 | 50 |
+| 下午 | 15 | 25 | 35 | 45 | 55 |
+| 晚上 | 5 | 15 | 25 | 35 | 45 |
+```
+
+**效果**
+| :heatmap:{title: 热力图,} | 周一 | 周二 | 周三 | 周四 | 周五 |
+| ------ | ------ | ------ | ------ | ------ | ------ |
+| 上午 | 10 | 20 | 30 | 40 | 50 |
+| 下午 | 15 | 25 | 35 | 45 | 55 |
+| 晚上 | 5 | 15 | 25 | 35 | 45 |
+
+**示例（饼图）**
+```markdown
+| :pie:{title: 饼图,} | 数值 |
+| ------ | ------ |
+| 苹果 | 40 |
+| 香蕉 | 30 |
+| 橙子 | 20 |
+| 葡萄 | 10 |
+```
+
+**效果**
+| :pie:{title: 饼图,} | 数值 |
+| ------ | ------ |
+| 苹果 | 40 |
+| 香蕉 | 30 |
+| 橙子 | 20 |
+| 葡萄 | 10 |
+
 **示例（雷达图）**
 ```markdown
-| :radar:{x,y} | 技能1 | 技能2 | 技能3 | 技能4 | 技能5 |
+| :radar:{title: 雷达图,} | 技能1 | 技能2 | 技能3 | 技能4 | 技能5 |
 | ------ | ------ | ------ | ------ | ------ | ------ |
 | 用户A | 90 | 85 | 75 | 80 | 88 |
 | 用户B | 75 | 90 | 88 | 85 | 78 |
@@ -539,7 +573,7 @@ $$
 ```
 
 **效果**
-| :radar:{x,y} | 技能1 | 技能2 | 技能3 | 技能4 | 技能5 |
+| :radar:{title: 雷达图,} | 技能1 | 技能2 | 技能3 | 技能4 | 技能5 |
 | ------ | ------ | ------ | ------ | ------ | ------ |
 | 用户A | 90 | 85 | 75 | 80 | 88 |
 | 用户B | 75 | 90 | 88 | 85 | 78 |
@@ -547,7 +581,7 @@ $$
 
 **示例（散点图，多组数据）**
 ```markdown
-| :scatter:{group,name,x,y,size} | X | Y | Size | Series |
+| :scatter:{title: 散点图, group,name,x,y,size} | X | Y | Size | Series |
 | ------ | ------ | ------ | ------ | ------ |
 | A1 | 10 | 20 | 5 | 组一 |
 | A2 | 15 | 25 | 10 | 组一 |
@@ -570,7 +604,7 @@ $$
 ```
 
 **效果**
-| :scatter:{group,name,x,y,size} | X | Y | Size | Series |
+| :scatter:{title: 散点图, group,name,x,y,size} | X | Y | Size | Series |
 | ------ | ------ | ------ | ------ | ------ |
 | A1 | 10 | 20 | 5 | 组一 |
 | A2 | 15 | 25 | 10 | 组一 |
@@ -595,7 +629,7 @@ $$
 
 默认地图数据源：
 ```markdown
-| :map:{name,value} | 数值 |
+| :map:{title: 中国地图,} | 数值 |
 | :-: | :-: |
 | 北京 | 100 |
 | 上海 | 200 |
@@ -606,7 +640,7 @@ $$
 ```
 
 **效果**
-| :map:{name,value} | 数值 |
+| :map:{title: 中国地图,} | 数值 |
 | :-: | :-: |
 | 北京 | 100 |
 | 上海 | 200 |
@@ -617,30 +651,28 @@ $$
 
 **自定义地图数据源：**
 ```markdown
-<!-- mapDataSource: https://geo.datav.aliyun.com/areas_v3/bound/100000_full.json -->
-| :map:{name,value} | 数值 |
+| :map:{title: 北京地图, mapDataSource: https://geo.datav.aliyun.com/areas_v3/bound/110000_full.json,} | 数值 |
 | :-: | :-: |
-| 北京 | 120 |
-| 上海 | 280 |
-| 广东 | 350 |
-| 四川 | 180 |
-| 江苏 | 290 |
-| 浙江 | 220 |
+| 海淀区 | 120 |
+| 朝阳区 | 280 |
+| 丰台区 | 350 |
+| 顺义区 | 180 |
+| 密云区 | 290 |
+| 大兴区 | 220 |
 ```
 
 **效果**
-<!-- mapDataSource: https://geo.datav.aliyun.com/areas_v3/bound/100000_full.json -->
-| :map:{name,value} | 数值 |
+| :map:{title: 北京地图, mapDataSource: https://geo.datav.aliyun.com/areas_v3/bound/110000_full.json,} | 数值 |
 | :-: | :-: |
-| 北京 | 120 |
-| 上海 | 280 |
-| 广东 | 350 |
-| 四川 | 180 |
-| 江苏 | 290 |
-| 浙江 | 220 |
+| 海淀区 | 120 |
+| 朝阳区 | 280 |
+| 丰台区 | 350 |
+| 顺义区 | 180 |
+| 密云区 | 290 |
+| 大兴区 | 220 |
 
 **说明：**
-- 使用 `<!-- mapDataSource: your-map-data.json -->` 注释来指定自定义地图数据源
+- 使用 `mapDataSource` 参数来指定自定义地图数据源
 - 支持相对路径和绝对URL
 - 如果不指定数据源，将使用系统默认的地图数据
 - 也可以通过 Cherry 配置中的 `toolbars.config.mapTable.sourceUrl` 全局配置数据源
diff --git a/examples/assets/scripts/index-demo.js b/examples/assets/scripts/index-demo.js
index e80ba83..4d29721 100644
--- a/examples/assets/scripts/index-demo.js
+++ b/examples/assets/scripts/index-demo.js
@@ -92,13 +92,13 @@ var customMenuC = Cherry.createMenuHook('帮助中心',  {
 var customMenuTable = Cherry.createMenuHook('图表',  {
   iconName: 'trendingUp',
   subMenuConfig: [
-    { noIcon: true, name: '折线图', onclick: (event)=>{cherry.insert('\n| :line:{x,y} | Header1 | Header2 | Header3 | Header4 |\n| ------ | ------ | ------ | ------ | ------ |\n| Sample1 | 11 | 11 | 4 | 33 |\n| Sample2 | 112 | 111 | 22 | 222 |\n| Sample3 | 333 | 142 | 311 | 11 |\n');} },
-    { noIcon: true, name: '柱状图', onclick: (event)=>{cherry.insert('\n| :bar:{x,y} | Header1 | Header2 | Header3 | Header4 |\n| ------ | ------ | ------ | ------ | ------ |\n| Sample1 | 11 | 11 | 4 | 33 |\n| Sample2 | 112 | 111 | 22 | 222 |\n| Sample3 | 333 | 142 | 311 | 11 |\n');} },
-    { noIcon: true, name: '雷达图', onclick: (event)=>{cherry.insert('\n| :radar:{x,y} | 技能1 | 技能2 | 技能3 | 技能4 | 技能5 |\n| ------ | ------ | ------ | ------ | ------ | ------ |\n| 用户A | 90 | 85 | 75 | 80 | 88 |\n| 用户B | 75 | 90 | 88 | 85 | 78 |\n| 用户C | 85 | 78 | 90 | 88 | 85 |\n');} },
-    { noIcon: true, name: '热力图', onclick: (event)=>{cherry.insert('\n| :heatmap:{x,y,value} | 周一 | 周二 | 周三 | 周四 | 周五 |\n| ------ | ------ | ------ | ------ | ------ | ------ |\n| 上午 | 10 | 20 | 30 | 40 | 50 |\n| 下午 | 15 | 25 | 35 | 45 | 55 |\n| 晚上 | 5 | 15 | 25 | 35 | 45 |\n');} },
-    { noIcon: true, name: '饼图', onclick: (event)=>{cherry.insert('\n| :pie:{name,value} | 数值 |\n| ------ | ------ |\n| 苹果 | 40 |\n| 香蕉 | 30 |\n| 橙子 | 20 |\n| 葡萄 | 10 |\n');} },
-    { noIcon: true, name: '散点图', onclick: (event)=>{cherry.insert('\n| :scatter:{group,name,x,y,size} | X | Y | Size | Series |\n| ------ | ------ | ------ | ------ | ------ |\n| A1 | 10 | 20 | 5 | S1 |\n| A2 | 15 | 35 | 8 | S1 |\n| B1 | 30 | 12 | 3 | S2 |\n| B2 | 25 | 28 | 6 | S2 |\n| C1 | 50 | 40 | 9 | S3 |\n| C2 | 60 | 55 | 7 | S3 |\n');} },
-    { noIcon: true, name: '地图', onclick: (event)=>{cherry.insert('\n<!-- mapDataSource: https://geo.datav.aliyun.com/areas_v3/bound/100000_full.json -->\n| :map:{name,value} | 数值 |\n| :-: | :-: |\n| 北京 | 100 |\n| 上海 | 200 |\n| 广东 | 300 |\n| 四川 | 150 |\n| 江苏 | 250 |\n| 浙江 | 180 |\n\n**说明：** 修改注释中的URL来自定义地图数据源\n');} },
+    { noIcon: true, name: '折线图', onclick: (event)=>{cherry.insert('\n| :line:{title: 折线图,} | Header1 | Header2 | Header3 | Header4 |\n| ------ | ------ | ------ | ------ | ------ |\n| Sample1 | 11 | 11 | 4 | 33 |\n| Sample2 | 112 | 111 | 22 | 222 |\n| Sample3 | 333 | 142 | 311 | 11 |\n');} },
+    { noIcon: true, name: '柱状图', onclick: (event)=>{cherry.insert('\n| :bar:{title: 柱状图,} | Header1 | Header2 | Header3 | Header4 |\n| ------ | ------ | ------ | ------ | ------ |\n| Sample1 | 11 | 11 | 4 | 33 |\n| Sample2 | 112 | 111 | 22 | 222 |\n| Sample3 | 333 | 142 | 311 | 11 |\n');} },
+    { noIcon: true, name: '雷达图', onclick: (event)=>{cherry.insert('\n| :radar:{title: 雷达图,} | 技能1 | 技能2 | 技能3 | 技能4 | 技能5 |\n| ------ | ------ | ------ | ------ | ------ | ------ |\n| 用户A | 90 | 85 | 75 | 80 | 88 |\n| 用户B | 75 | 90 | 88 | 85 | 78 |\n| 用户C | 85 | 78 | 90 | 88 | 85 |\n');} },
+    { noIcon: true, name: '热力图', onclick: (event)=>{cherry.insert('\n| :heatmap:{title: 热力图,} | 周一 | 周二 | 周三 | 周四 | 周五 |\n| ------ | ------ | ------ | ------ | ------ | ------ |\n| 上午 | 10 | 20 | 30 | 40 | 50 |\n| 下午 | 15 | 25 | 35 | 45 | 55 |\n| 晚上 | 5 | 15 | 25 | 35 | 45 |\n');} },
+    { noIcon: true, name: '饼图', onclick: (event)=>{cherry.insert('\n| :pie:{title: 饼图,} | 数值 |\n| ------ | ------ |\n| 苹果 | 40 |\n| 香蕉 | 30 |\n| 橙子 | 20 |\n| 葡萄 | 10 |\n');} },
+    { noIcon: true, name: '散点图', onclick: (event)=>{cherry.insert('\n| :scatter:{title: 散点图, group,name,x,y,size} | X | Y | Size | Series |\n| ------ | ------ | ------ | ------ | ------ |\n| A1 | 10 | 20 | 5 | S1 |\n| A2 | 15 | 35 | 8 | S1 |\n| B1 | 30 | 12 | 3 | S2 |\n| B2 | 25 | 28 | 6 | S2 |\n| C1 | 50 | 40 | 9 | S3 |\n| C2 | 60 | 55 | 7 | S3 |\n');} },
+    { noIcon: true, name: '地图', onclick: (event)=>{cherry.insert('\n| :map:{title: 地图, mapDataSource: https://geo.datav.aliyun.com/areas_v3/bound/100000_full.json,} | 数值 |\n| :-: | :-: |\n| 北京 | 100 |\n| 上海 | 200 |\n| 广东 | 300 |\n| 四川 | 150 |\n| 江苏 | 250 |\n| 浙江 | 180 |\n\n**说明：** 修改mapDataSource参数来自定义地图数据源\n');} },
   ]
 });
 
diff --git a/packages/cherry-markdown/src/addons/advance/cherry-table-echarts-plugin.js b/packages/cherry-markdown/src/addons/advance/cherry-table-echarts-plugin.js
index 1094988..07c2b80 100644
--- a/packages/cherry-markdown/src/addons/advance/cherry-table-echarts-plugin.js
+++ b/packages/cherry-markdown/src/addons/advance/cherry-table-echarts-plugin.js
@@ -650,41 +650,29 @@ export default class EChartsTableEngine {
    */
   render(type, options, tableObject) {
     Logger.log('Rendering chart:', type, options, tableObject);
-    let chartOption = {};
-    switch (type) {
-      case 'bar':
-        chartOption = this.renderBarChart(tableObject, options);
-        break;
-      case 'line':
-        chartOption = this.renderLineChart(tableObject, options);
-        break;
-      case 'radar':
-        chartOption = this.renderRadarChart(tableObject, options);
-        break;
-      case 'map':
-        chartOption = this.renderMapChart(tableObject, options);
-        break;
-      case 'heatmap':
-        chartOption = this.renderHeatmapChart(tableObject, options);
-        break;
-      case 'pie':
-        chartOption = this.renderPieChart(tableObject, options);
-        break;
-      case 'scatter':
-        chartOption = this.renderScatterChart(tableObject, options);
-        break;
-      default:
-        return '';
-    }
-    Logger.log('Chart options:', chartOption);
+    const handler = {
+      bar: BarChartOptionsHandler,
+      line: LineChartOptionsHandler,
+      radar: RadarChartOptionsHandler,
+      map: MapChartOptionsHandler,
+      heatmap: HeatmapChartOptionsHandler,
+      pie: PieChartOptionsHandler,
+      scatter: ScatterChartOptionsHandler,
+    }[type];
 
     // 生成唯一ID和简化的配置数据
     const chartId = `chart-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
-
     // 序列化数据用于存储
     const tableDataStr = JSON.stringify(tableObject);
     const chartOptionsStr = JSON.stringify(options);
 
+    options.chartId = chartId;
+    options.engine = this;
+    const chartOption = handler ? generateOptions(handler, tableObject, options) : {};
+    Logger.log('Chart options:', chartOption);
+
+
+
     // 创建一个包含所有必要信息的HTML结构
     const htmlContent = `
       <div class="cherry-echarts-wrapper" 
@@ -1618,3 +1606,689 @@ export default class EChartsTableEngine {
     }
   }
 }
+
+// Handler-based chart configuration system from PR #1349, enhanced with PR #1362 features
+const TitleOptionsHandler = {
+  options(tableObject, options) {
+    return options.title
+      ? {
+          title: {
+            text: options.title,
+            left: 'center',
+            top: 'bottom',
+            textStyle: {
+              color: '#666',
+              fontSize: 16,
+            },
+          },
+        }
+      : {};
+  },
+};
+
+const BaseChartOptionsHandler = {
+  components: [TitleOptionsHandler],
+  options(tableObject, options) {
+    const engine = options.engine;
+    return {
+      backgroundColor: '#fff',
+      color: engine.$palette(),
+      tooltip: {
+        trigger: 'item',
+        backgroundColor: 'rgba(0,0,0,0.8)',
+        borderColor: '#999',
+        borderWidth: 1,
+        textStyle: {
+          color: '#fff',
+          fontSize: 12,
+        },
+        extraCssText: 'box-shadow: 0 2px 8px rgba(0,0,0,0.15); border-radius: 4px;',
+      },
+      toolbox: engine.$toolbox(),
+    };
+  },
+};
+
+const LegendOptionsHandler = {
+  options(tableObject, options) {
+    const engine = options.engine;
+    return {
+      legend: engine.$legend({ data: tableObject.rows.map((row) => row[0]) }),
+    };
+  },
+};
+
+const AxisOptionsHandler = {
+  components: [BaseChartOptionsHandler, LegendOptionsHandler],
+  options(tableObject, options) {
+    const engine = options.engine;
+    const data = [];
+    const series = [];
+    tableObject.rows.forEach((row) => {
+      console.log('Processing row:', row);
+      data.push(row[0]);
+      series.push({
+        name: row[0],
+        data: row.slice(1).map((data) => engine.$num(data)),
+      });
+    });
+
+    return {
+      tooltip: engine.$tooltip({
+        trigger: 'axis',
+        axisPointer: {
+          label: { backgroundColor: '#6a7985' },
+          crossStyle: { color: '#999' },
+        },
+        formatter: engine.$tooltipAxisFormatter(),
+      }),
+      legend: { data },
+      series,
+      xAxis: engine.$axis('category', {
+        data: tableObject.header.slice(1),
+        axisTick: { alignWithLabel: true },
+        axisLabel: {
+          textStyle: { color: engine.$theme().color.text },
+          rotate: tableObject.header.slice(1).some((h) => h.length > 4) ? 45 : 0,
+          interval: 0,
+        },
+      }),
+      yAxis: engine.$axis('value', {
+        axisLabel: {
+          textStyle: { color: engine.$theme().color.text },
+          formatter(value) {
+            if (value >= 1000000) return `${(value / 1000000).toFixed(1)}M`;
+            if (value >= 1000) return `${(value / 1000).toFixed(1)}K`;
+            return value;
+          },
+        },
+        nameTextStyle: { color: engine.$theme().color.text },
+      }),
+      grid: engine.$grid({ left: '3%', top: '15%' }),
+      dataZoom: engine.$dataZoom(tableObject.header.length > 8),
+    };
+  },
+};
+
+const LineChartOptionsHandler = {
+  components: [AxisOptionsHandler],
+  options(tableObject, options) {
+    const engine = options.engine;
+    return {
+      'tooltip.axisPointer.type': 'cross',
+      'series.$item': engine.$baseSeries('line'),
+    };
+  },
+};
+
+const BarChartOptionsHandler = {
+  components: [AxisOptionsHandler],
+  options(tableObject, options) {
+    const engine = options.engine;
+    return {
+      'tooltip.axisPointer.type': 'shadow',
+      'series.$item': engine.$baseSeries('bar', { barWidth: '60%' }),
+      brush: { toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'], xAxisIndex: 0 },
+    };
+  },
+};
+
+const RadarChartOptionsHandler = {
+  components: [BaseChartOptionsHandler, LegendOptionsHandler],
+  options(tableObject, options) {
+    const engine = options.engine;
+    const indicator = tableObject.header.slice(1).map((header) => {
+      const maxValue = Math.max(
+        ...tableObject.rows.map((row) => {
+          const index = tableObject.header.indexOf(header);
+          return engine.$num(row[index]);
+        }),
+      );
+      return {
+        name: header,
+        max: Math.ceil(maxValue * 1.2),
+      };
+    });
+    
+    const seriesData = tableObject.rows.map((row, index) => ({
+      name: row[0],
+      value: row.slice(1).map((data) => engine.$num(data)),
+      areaStyle: { opacity: 0.1 + index * 0.05 },
+      lineStyle: { width: 2 },
+      itemStyle: { borderWidth: 2 },
+    }));
+
+    return {
+      'tooltip.formatter'(params) {
+        let result = `<div style="margin-bottom:4px;font-weight:bold;">${engine.$dot(params.color)}${params.name}</div>`;
+        params.value.forEach((value, index) => {
+          result += '<div style="margin:2px 0;">';
+          result += `<span style="font-weight:bold;">${indicator[index].name}</span>`;
+          result += `<span style="float:right;margin-left:20px;font-weight:bold;">${value}</span>`;
+          result += '</div>';
+        });
+        return result;
+      },
+      radar: {
+        name: {
+          textStyle: { color: engine.$theme().color.text, fontSize: 12, fontWeight: 'bold' },
+          formatter(name) { return name.length > 6 ? `${name.substr(0, 6)}...` : name; },
+        },
+        indicator,
+        radius: '60%',
+        center: ['50%', '50%'],
+        splitNumber: 5,
+        shape: 'polygon',
+        splitArea: { areaStyle: { color: engine.$palette('radar').reverse() } },
+        axisName: { color: engine.$theme().color.text },
+        axisLine: { lineStyle: { color: 'rgba(211, 253, 250, 0.8)' } },
+        splitLine: { lineStyle: { color: 'rgba(211, 253, 250, 0.8)' } },
+      },
+      series: [
+        engine.$baseSeries('radar', {
+          name: '雷达图数据',
+          data: seriesData,
+          emphasis: { lineStyle: { width: 4 }, areaStyle: { opacity: 0.3 } },
+        }),
+      ],
+    };
+  },
+};
+
+const HeatmapChartOptionsHandler = {
+  components: [BaseChartOptionsHandler],
+  options(tableObject, options) {
+    const engine = options.engine;
+    const xAxisData = tableObject.header.slice(1);
+    const yAxisData = tableObject.rows.map((row) => row[0]);
+    const data = [];
+    
+    tableObject.rows.forEach((row, yIndex) => {
+      row.slice(1).forEach((value, xIndex) => {
+        data.push([xIndex, yIndex, engine.$num(value)]);
+      });
+    });
+
+    const values = data.map((item) => item[2]);
+    const minValue = Math.min(...values);
+    const maxValue = Math.max(...values);
+
+    return {
+      tooltip: engine.$tooltip({
+        formatter(params) {
+          return `${yAxisData[params.data[1]]}<br/>${xAxisData[params.data[0]]}: <strong>${params.data[2]}</strong>`;
+        },
+      }),
+      grid: engine.$grid({ height: '50%', top: '10%', left: '10%', right: '10%' }),
+      xAxis: engine.$axis('category', { data: xAxisData, splitArea: { show: true } }),
+      yAxis: engine.$axis('category', { data: yAxisData, splitArea: { show: true } }),
+      visualMap: {
+        min: minValue,
+        max: maxValue,
+        calculable: true,
+        orient: 'horizontal',
+        left: 'center',
+        bottom: '15%',
+        inRange: { color: engine.$palette('heatmap') },
+        textStyle: { color: engine.$theme().color.text, fontSize: engine.$theme().fontSize.base },
+      },
+      series: [
+        engine.$baseSeries('heatmap', {
+          name: '热力图数据',
+          data,
+          label: { show: true, fontSize: 10 },
+          emphasis: {
+            itemStyle: {
+              shadowBlur: engine.$theme().shadow.blur,
+              shadowColor: engine.$theme().shadow.color,
+              borderWidth: 2,
+              borderColor: engine.$theme().color.emphasis,
+            },
+          },
+          select: { itemStyle: { borderWidth: 2, borderColor: engine.$theme().color.emphasis, opacity: 1 } },
+          selectedMode: 'single',
+          animationEasing: 'cubicOut',
+        }),
+      ],
+      toolbox: engine.$toolbox({}, { top: 'bottom' }),
+    };
+  },
+};
+
+const PieChartOptionsHandler = {
+  components: [BaseChartOptionsHandler],
+  options(tableObject, options) {
+    const engine = options.engine;
+    const data = tableObject.rows.map((row) => ({ name: row[0], value: engine.$num(row[1]) }));
+
+    return {
+      tooltip: engine.$tooltip({ trigger: 'item', formatter: '{a} <br/>{b}: {c} ({d}%)' }),
+      legend: engine.$legend({ orient: 'vertical', left: 'left', top: 'middle' }),
+      series: [
+        engine.$baseSeries('pie', {
+          name: '数据分布',
+          radius: ['40%', '70%'],
+          center: ['50%', '50%'],
+          avoidLabelOverlap: false,
+          label: { show: false, position: 'center' },
+          emphasis: {
+            label: { show: true, fontSize: '18', fontWeight: 'bold' },
+            itemStyle: {
+              shadowBlur: engine.$theme().shadow.blur,
+              shadowOffsetX: 0,
+              shadowColor: engine.$theme().shadow.color,
+              borderWidth: 3,
+              borderColor: engine.$theme().color.emphasis,
+            },
+          },
+          select: { itemStyle: { borderWidth: 3, borderColor: engine.$theme().color.emphasis, opacity: 1 } },
+          selectedMode: 'single',
+          labelLine: { show: false },
+          data,
+          animationEasing: 'cubicOut',
+        }),
+      ],
+    };
+  },
+};
+
+// Scatter chart handler integrated from PR #1362
+const ScatterChartOptionsHandler = {
+  components: [BaseChartOptionsHandler],
+  options(tableObject, options) {
+    const engine = options.engine;
+    console.log('Rendering scatter chart:', tableObject);
+
+    // Support both forms from PR #1362:
+    // 1) Single series: | :scatter:{name,x,y,size?} | X | Y | Size? |
+    // 2) Multi series: | :scatter:{group,name,x,y,size?} | X | Y | Size? | Series |
+    const headers = tableObject.header;
+    const findHeader = (candidates) =>
+      headers.findIndex((h, i) => i > 0 && candidates.some((c) => String(h).toLowerCase().includes(c)));
+    const xCol = findHeader(['x']);
+    const yCol = findHeader(['y']);
+    const sizeCol = findHeader(['size', '大小']);
+    let groupCol = findHeader(['series', 'group', '分组', '系列']);
+    // If column count reaches name,x,y,size,group length but no group detected, default last column as group
+    if (groupCol <= 0 && headers.length >= 5) {
+      groupCol = headers.length - 1;
+    }
+
+    const hasSizeColumn = sizeCol > 0;
+    const hasGroupColumn = groupCol > 0;
+
+    // Parse into unified objects
+    const parsedRows = tableObject.rows.map((row) => {
+      const x = engine.$num(row[xCol > 0 ? xCol : 1]);
+      const y = engine.$num(row[yCol > 0 ? yCol : 2]);
+      const size = hasSizeColumn ? engine.$num(row[sizeCol]) : undefined;
+      const seriesName = hasGroupColumn ? String(row[groupCol] ?? '').trim() || '系列1' : null;
+      return { name: row[0], x, y, size, seriesName };
+    });
+
+    // If size column provided, use linear normalization (6~28) to control point display size
+    let minSize = Infinity;
+    let maxSize = -Infinity;
+    if (hasSizeColumn) {
+      parsedRows.forEach((r) => {
+        if (typeof r.size === 'number' && !Number.isNaN(r.size)) {
+          minSize = Math.min(minSize, r.size);
+          maxSize = Math.max(maxSize, r.size);
+        }
+      });
+      if (!Number.isFinite(minSize) || !Number.isFinite(maxSize)) {
+        minSize = 0;
+        maxSize = 0;
+      }
+    }
+
+    // Build series data
+    let series = [];
+    if (hasGroupColumn) {
+      const groupMap = new Map();
+      parsedRows.forEach((r) => {
+        const item = { value: [r.x, r.y], name: r.name };
+        if (hasSizeColumn) {
+          if (maxSize === minSize) {
+            item.symbolSize = 12;
+          } else if (typeof r.size === 'number' && !Number.isNaN(r.size)) {
+            const t = (r.size - minSize) / (maxSize - minSize);
+            item.symbolSize = Math.round(6 + t * (28 - 6));
+          } else {
+            item.symbolSize = 10;
+          }
+        }
+        const key = r.seriesName;
+        if (!groupMap.has(key)) groupMap.set(key, []);
+        groupMap.get(key).push(item);
+      });
+      series = Array.from(groupMap.entries()).map(([name, data]) =>
+        engine.$baseSeries('scatter', {
+          name,
+          data,
+          emphasis: {
+            focus: 'series',
+            itemStyle: {
+              shadowBlur: engine.$theme().shadow.blur,
+              shadowColor: engine.$theme().shadow.color,
+              borderWidth: 2,
+              borderColor: engine.$theme().color.emphasis,
+            },
+          },
+          select: { itemStyle: { borderWidth: 2, borderColor: engine.$theme().color.emphasis, opacity: 1 } },
+          selectedMode: 'single',
+          animationEasing: 'cubicOut',
+        }),
+      );
+    } else {
+      const data = parsedRows.map((r) => {
+        const item = { value: [r.x, r.y], name: r.name };
+        if (hasSizeColumn) {
+          if (maxSize === minSize) item.symbolSize = 12;
+          else if (typeof r.size === 'number' && !Number.isNaN(r.size)) {
+            const t = (r.size - minSize) / (maxSize - minSize);
+            item.symbolSize = Math.round(6 + t * (28 - 6));
+          } else item.symbolSize = 10;
+        }
+        return item;
+      });
+      series = [
+        engine.$baseSeries('scatter', {
+          name: '散点',
+          data,
+          emphasis: {
+            focus: 'series',
+            itemStyle: { borderWidth: 2, borderColor: engine.$theme().color.emphasis },
+          },
+          select: { itemStyle: { borderWidth: 2, borderColor: engine.$theme().color.emphasis, opacity: 1 } },
+          selectedMode: 'single',
+          animationEasing: 'cubicOut',
+        }),
+      ];
+    }
+
+    return {
+      tooltip: engine.$tooltip({
+        trigger: 'item',
+        formatter(params) {
+          const [x, y] = params.value || [];
+          return `${params.name}<br/>x: <strong>${x}</strong><br/>y: <strong>${y}</strong>`;
+        },
+      }),
+      legend: engine.$legend(),
+      toolbox: engine.$toolbox({ dataZoom: {} }),
+      grid: engine.$grid(),
+      xAxis: engine.$axis('value'),
+      yAxis: engine.$axis('value'),
+      series,
+    };
+  },
+};
+
+// Map chart handlers from PR #1349 with PR #1362 integration
+const MapChartLoadingOptionsHandler = {
+  options(tableObject, options) {
+    console.log('Rendering map chart:', tableObject);
+
+    return typeof window.echarts === 'undefined'
+      ? {
+          title: {
+            text: '地图渲染失败: ECharts 库未加载',
+            left: 'center',
+            textStyle: { color: '#ff0000' },
+          },
+        }
+      : {
+          title: {
+            text: '正在加载地图数据...',
+            left: 'center',
+            top: 'middle',
+            textStyle: { color: '#666', fontSize: 16 },
+          },
+          graphic: {
+            elements: [
+              {
+                type: 'text',
+                left: 'center',
+                top: '60%',
+                style: {
+                  text: '如果长时间未显示，请检查网络连接',
+                  font: '12px sans-serif',
+                  fill: '#999',
+                },
+              },
+            ],
+          },
+        };
+  },
+};
+
+const MapChartCompleteOptionsHandler = {
+  components: [BaseChartOptionsHandler],
+  options(tableObject, options) {
+    const engine = options.engine;
+    const mapData = tableObject.rows.map((row) => {
+      const originalName = row[0];
+      const standardName = normalizeProvinceName(originalName);
+      const value = engine.$num(row[1]);
+      return { name: standardName, value };
+    });
+
+    return {
+      'tooltip.formatter': (params) => `${params.name}: ${params.value || 0}`,
+      visualMap: {
+        min: Math.min(...mapData.map((item) => item.value)),
+        max: Math.max(...mapData.map((item) => item.value)),
+        left: 'left',
+        top: 'bottom',
+        text: ['高', '低'],
+        calculable: true,
+        inRange: { color: engine.$palette('map') },
+        textStyle: {
+          color: engine.$theme().color.text,
+          fontSize: engine.$theme().fontSize.base,
+        },
+      },
+      series: [
+        {
+          name: '地图数据',
+          type: 'map',
+          map: options.mapDataSource || 'china',
+          roam: true,
+          label: { show: true, fontSize: 12 },
+          data: mapData,
+          emphasis: {
+            label: {
+              show: true,
+              fontSize: engine.$theme().fontSize.base,
+              fontWeight: 'bold',
+            },
+            itemStyle: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' },
+          },
+        },
+      ],
+    };
+  },
+};
+
+const MapChartOptionsHandler = {
+  options(tableObject, options) {
+    this.$loadMapData(tableObject, options);
+    return generateOptions(MapChartLoadingOptionsHandler, tableObject, options);
+  },
+  $loadMapData(tableObject, options) {
+    let paths = [];
+    if (options && options.mapDataSource) {
+      paths.push(options.mapDataSource);
+    }
+    if (options?.engine?.cherryOptions?.toolbars?.config?.mapTable?.sourceUrl) {
+      paths = paths.concat(options.engine.cherryOptions.toolbars.config.mapTable.sourceUrl);
+    }
+    paths = paths.concat([
+      'https://geo.datav.aliyun.com/areas_v3/bound/100000_full.json',
+      './assets/data/china.json',
+    ]);
+    this.$tryLoadMapDataFromPaths(paths, 0, options);
+  },
+  $tryLoadMapDataFromPaths(paths, index, options) {
+    if (index >= paths.length) {
+      console.error('所有地图数据源都加载失败');
+      return;
+    }
+
+    const url = paths[index];
+    console.log(`尝试加载地图数据: ${url}`);
+
+    this.$fetchMapData(url)
+      .then((geoJson) => {
+        window.echarts.registerMap(url, geoJson);
+        console.log(`地图数据加载成功！来源: ${url}`);
+        this.$refreshMapChart(options.chartId, url, options.engine);
+        return geoJson;
+      })
+      .catch((error) => {
+        console.warn(`地图数据加载失败 (${url}):`, error.message);
+        this.$tryLoadMapDataFromPaths(paths, index + 1, options);
+      });
+  },
+  $fetchMapData(url) {
+    return fetch(url, { referrerPolicy: 'no-referrer' }).then((response) => {
+      if (!response.ok) {
+        throw new Error(`HTTP error! status: ${response.status} for ${url}`);
+      }
+      return response.json();
+    });
+  },
+  $refreshMapChart(chartId, url, engine) {
+    const container = document.querySelector(`[id="${chartId}"][data-chart-type="map"]`);
+    const tableDataStr = container.getAttribute('data-table-data');
+    const chartOptionsStr = container.getAttribute('data-chart-options');
+
+    if (tableDataStr && engine.echartsRef) {
+      try {
+        const tableData = JSON.parse(tableDataStr);
+        const chartOptions = chartOptionsStr ? JSON.parse(chartOptionsStr) : {};
+        deepMerge(chartOptions, { mapDataSource: url });
+
+        const chartOption = generateOptions(MapChartCompleteOptionsHandler, tableData, chartOptions);
+        const existingChart = engine.echartsRef.getInstanceByDom(container);
+
+        if (existingChart) {
+          existingChart.setOption(chartOption, true);
+          console.log('Map chart refreshed successfully:', chartId);
+        } else {
+          const newChart = engine.echartsRef.init(container);
+          newChart.setOption(chartOption);
+          console.log('Map chart recreated:', chartId);
+        }
+      } catch (error) {
+        console.error('Failed to refresh map chart:', chartId, error);
+      }
+    }
+  },
+};
+
+// Province name mapping from PR #1349
+const provinceNameMap = {
+  北京: '北京市',
+  天津: '天津市',
+  上海: '上海市',
+  重庆: '重庆市',
+  河北: '河北省',
+  山西: '山西省',
+  辽宁: '辽宁省',
+  吉林: '吉林省',
+  黑龙江: '黑龙江省',
+  江苏: '江苏省',
+  浙江: '浙江省',
+  安徽: '安徽省',
+  福建: '福建省',
+  江西: '江西省',
+  山东: '山东省',
+  河南: '河南省',
+  湖北: '湖北省',
+  湖南: '湖南省',
+  广东: '广东省',
+  海南: '海南省',
+  四川: '四川省',
+  贵州: '贵州省',
+  云南: '云南省',
+  陕西: '陕西省',
+  甘肃: '甘肃省',
+  青海: '青海省',
+  台湾: '台湾省',
+  内蒙古: '内蒙古自治区',
+  广西: '广西壮族自治区',
+  西藏: '西藏自治区',
+  宁夏: '宁夏回族自治区',
+  新疆: '新疆维吾尔自治区',
+  香港: '香港特别行政区',
+  澳门: '澳门特别行政区',
+};
+
+const normalizeProvinceName = (inputName) => {
+  const cleanName = inputName.trim();
+  if (provinceNameMap[cleanName]) return provinceNameMap[cleanName];
+  if (
+    cleanName.endsWith('市') ||
+    cleanName.endsWith('省') ||
+    cleanName.endsWith('自治区') ||
+    cleanName.endsWith('特别行政区')
+  ) {
+    return cleanName;
+  }
+  for (const [shortName, fullName] of Object.entries(provinceNameMap)) {
+    if (fullName.includes(cleanName) || cleanName.includes(shortName)) {
+      return fullName;
+    }
+  }
+  console.warn(`Province name not matched: ${inputName}`);
+  return cleanName;
+};
+
+/**
+ * Generate chart options with handler composition from PR #1349
+ */
+function generateOptions(handler, tableObject, options) {
+  let result;
+  if (!handler.components || handler.components.length === 0) {
+    result = {};
+  } else {
+    result = generateOptions(handler.components[0], tableObject, options);
+    for (const handler2 of handler.components.slice(1)) {
+      deepMerge(result, generateOptions(handler2, tableObject, options));
+    }
+  }
+  deepMerge(result, handler.options(tableObject, options));
+  return result;
+}
+
+/**
+ * Deep merge utility from PR #1349
+ */
+function deepMerge(target, source) {
+  for (const key of Object.keys(source)) {
+    if (Object.prototype.hasOwnProperty.call(source, key)) {
+      const keyList = key.split('.');
+      let target2 = target;
+      for (const key2 of keyList.slice(0, -1)) {
+        if (typeof target2[key2] !== 'object' || target2[key2] === null || target2[key2] === undefined) {
+          target2[key2] = {};
+        }
+        target2 = target2[key2];
+      }
+
+      const key3 = keyList[keyList.length - 1];
+      if (Array.isArray(target2) && key3 === '$item') {
+        for (const item of target2) {
+          deepMerge(item, source[key]);
+        }
+      } else if (typeof target2[key3] === 'object' && typeof source[key] === 'object') {
+        deepMerge(target2[key3], source[key]);
+      } else {
+        target2[key3] = source[key];
+      }
+    }
+  }
+  return target;
+}
diff --git a/packages/cherry-markdown/src/addons/advance/cherry-table-echarts-plugin.js.backup b/packages/cherry-markdown/src/addons/advance/cherry-table-echarts-plugin.js.backup
new file mode 100644
index 0000000..708c254
--- /dev/null
+++ b/packages/cherry-markdown/src/addons/advance/cherry-table-echarts-plugin.js.backup
@@ -0,0 +1,1608 @@
+/**
+ * Copyright (C) 2021 Tencent.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import mergeWith from 'lodash/mergeWith';
+import Logger from '@/Logger';
+
+// 主题与常量集中管理
+const THEME = {
+  color: {
+    border: '#999',
+    borderHover: '#666',
+    text: '#333',
+    tooltipText: '#333',
+    tooltipTextDark: '#ddd',
+    emphasis: '#ff6b6b',
+    lineSplit: '#eee',
+  },
+  shadow: {
+    color: 'rgba(0, 0, 0, 0.5)',
+    blur: 10,
+  },
+  fontSize: {
+    base: 12,
+    small: 10,
+    title: 16,
+  },
+};
+
+const DEFAULT_OPTIONS = {
+  renderer: 'svg',
+  width: 500,
+  height: 300,
+};
+
+export default class EChartsTableEngine {
+  static install(cherryOptions, ...args) {
+    if (typeof window === 'undefined') {
+      Logger.warn('echarts-table-engine only works in browser.');
+      mergeWith(cherryOptions, {
+        engine: {
+          syntax: {
+            table: {
+              enableChart: false,
+            },
+          },
+        },
+      });
+      return;
+    }
+    mergeWith(cherryOptions, {
+      engine: {
+        syntax: {
+          table: {
+            enableChart: true,
+            chartRenderEngine: EChartsTableEngine,
+            externals: ['echarts'],
+          },
+        },
+      },
+    });
+  }
+
+  constructor(echartsOptions = {}) {
+    const { echarts, cherryOptions, ...options } = echartsOptions;
+    if (!echarts && !window.echarts) {
+      throw new Error('table-echarts-plugin[init]: Package echarts not found.');
+    }
+    this.options = { ...DEFAULT_OPTIONS, ...(options || {}) };
+    this.echartsRef = echarts || window.echarts; // echarts引用
+    this.dom = null;
+
+    // 保存Cherry配置，用于获取地图数据源URL
+    this.cherryOptions = cherryOptions;
+    // 统一管理实例
+    this.instances = new Set();
+    // 主题监听器
+    this.themeObservers = new Map();
+    // 运行时主题（根据CSS变量动态生成）
+    this.themeRuntime = null;
+    // 主题缓存：key 为主题名（default/dark/abyss等），值为 { echarts, runtime }
+    this.themeCache = new Map();
+
+    // 导出完成事件监听器
+    this.exportObservers = new Map();
+  }
+
+  /**
+   * 获取调色盘颜色，用于图表的配色
+   */
+  $palette(type = 'default') {
+    let palette = [];
+    switch (type) {
+      case 'radar':
+        palette = [
+          'rgba(114, 172, 209, 0.2)',
+          'rgba(114, 172, 209, 0.4)',
+          'rgba(114, 172, 209, 0.6)',
+          'rgba(114, 172, 209, 0.8)',
+          'rgba(114, 172, 209, 1)',
+        ];
+        break;
+      case 'heatmap':
+        palette = [
+          '#313695',
+          '#4575b4',
+          '#74add1',
+          '#abd9e9',
+          '#e0f3f8',
+          '#ffffcc',
+          '#fee090',
+          '#fdae61',
+          '#f46d43',
+          '#d73027',
+          '#a50026',
+        ];
+        break;
+      case 'map':
+        palette = ['#e0ffff', '#006edd'];
+        break;
+      default:
+        palette = ['#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'];
+        break;
+    }
+    return palette;
+  }
+
+  /**
+   * 构建悬浮提示基础配置
+   */
+  $tooltip(overrides = {}) {
+    return {
+      borderWidth: 1,
+      backgroundColor: this.$theme().color.tooltipBg,
+      borderColor: this.$theme().color.border,
+      textStyle: {
+        color: this.$theme().color.tooltipText,
+      },
+      extraCssText: 'box-shadow: 0 2px 8px rgba(0,0,0,0.15); border-radius: 4px;',
+      ...overrides,
+    };
+  }
+
+  /**
+   * 构建工具栏配置
+   * @param {Object} [featureOverrides] feature 覆盖项
+   * @param {Object} [posOverrides] 位置覆盖项
+   * @returns {Object} toolbox 配置
+   */
+  $toolbox(featureOverrides = {}, posOverrides = {}) {
+    return {
+      show: true,
+      orient: 'vertical',
+      left: posOverrides.left || 'right',
+      top: posOverrides.top || 'center',
+      feature: {
+        dataView: { show: true, readOnly: false, title: '数据视图', lang: ['数据视图', '关闭', '刷新'] },
+        restore: { show: true, title: '重置' },
+        saveAsImage: {
+          show: true,
+          title: '保存为图片',
+          type: this.options.renderer === 'svg' ? 'svg' : 'png', // renderer 类型为svg，默认只支持输出svg
+          backgroundColor: '#fff',
+        },
+        ...featureOverrides,
+      },
+      iconStyle: { borderColor: this.$theme().color.border },
+      emphasis: { iconStyle: { borderColor: this.$theme().color.borderHover } },
+    };
+  }
+
+  /**
+   * 构建网格配置
+   * @param {Object} [overrides]
+   * @returns {Object}
+   */
+  $grid(overrides = {}) {
+    return { containLabel: true, left: '8%', right: '8%', bottom: '8%', top: '12%', ...overrides };
+  }
+
+  /**
+   * 构建坐标轴配置
+   */
+  $axis(type = 'value', overrides = {}) {
+    return {
+      type,
+      axisLine: { lineStyle: { color: this.$theme().color.text } },
+      axisLabel: { color: this.$theme().color.text, fontSize: this.$theme().fontSize.base },
+      splitLine: { lineStyle: { color: this.$theme().color.lineSplit, type: 'dashed' } },
+      ...overrides,
+    };
+  }
+
+  /**
+   * 构建图例配置
+   */
+  $legend(overrides = {}) {
+    return {
+      type: 'scroll',
+      orient: 'horizontal',
+      left: overrides.left || 'center',
+      top: overrides.top || 'top',
+      textStyle: { color: this.$theme().color.text, fontSize: this.$theme().fontSize.base },
+      itemWidth: 12,
+      itemHeight: 12,
+      selectedMode: 'multiple',
+      selector: [
+        { type: 'all', title: '全选' },
+        { type: 'inverse', title: '反选' },
+      ],
+      selectorLabel: { color: this.$theme().color.text, borderColor: this.$theme().color.border },
+      ...overrides,
+    };
+  }
+
+  /**
+   * 构建数据缩放配置
+   */
+  $dataZoom(showSlider = true, overrides = {}) {
+    const base = [{ type: 'inside', xAxisIndex: [0], start: 0, end: 100 }];
+    if (showSlider) {
+      base.push({ type: 'slider', xAxisIndex: [0], bottom: '2%', start: 0, end: 100, height: 20 });
+    }
+    return base.map((z) => ({ ...z, ...overrides }));
+  }
+
+  /**
+   * 数值解析
+   * @param {any} value 输入值
+   * @returns {number} 数字（无法解析则为 0）
+   */
+  $num(value) {
+    const n = parseFloat(String(value ?? '').replace(/,/g, ''));
+    return Number.isFinite(n) ? n : 0;
+  }
+
+  /**
+   * 构建统一系列基础属性
+   */
+  $baseSeries(type, overrides = {}) {
+    const animation = {
+      animation: true,
+      animationDuration: 1000,
+      animationEasing: 'elasticOut',
+      animationDelay(idx) {
+        return idx * 10;
+      },
+    };
+    const base = {
+      name: '',
+      data: [],
+      emphasis: {
+        focus: 'series',
+        itemStyle: { shadowBlur: this.$theme().shadow.blur, shadowOffsetX: 0, shadowColor: this.$theme().shadow.color },
+      },
+    };
+    const dict = {
+      bar: {
+        type: 'bar',
+        label: { show: false, position: 'top', formatter: '{c}' },
+      },
+      line: {
+        type: 'line',
+        symbol: 'circle',
+        symbolSize: 8,
+        lineStyle: { width: 3, cap: 'round', join: 'round' },
+        itemStyle: { borderWidth: 2, borderColor: '#fff' },
+        smooth: 0.3,
+        markPoint: {
+          data: [
+            { type: 'max', name: '最大值' },
+            { type: 'min', name: '最小值' },
+          ],
+        },
+        emphasis: {
+          focus: 'series',
+          lineStyle: { width: 5 },
+          itemStyle: { borderWidth: 3 },
+        },
+      },
+      scatter: { type: 'scatter' },
+      radar: { type: 'radar' },
+      heatmap: { type: 'heatmap' },
+      pie: { type: 'pie' },
+    };
+    return { ...base, ...dict[type], ...animation, ...overrides };
+  }
+
+  /**
+   * 获取带有颜色的指示器圆点HTML片段
+   */
+  $dot(color) {
+    return `<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${color};"></span>`;
+  }
+
+  /**
+   * 轴向 tooltip 文本格式化器
+   */
+  $tooltipAxisFormatter() {
+    return (params) => {
+      const header = params?.[0]?.axisValueLabel ?? '';
+      let result = `<div style="margin-bottom:4px;font-weight:bold;">${header}</div>`;
+      params.forEach((item) => {
+        result += '<div style="margin:2px 0;">';
+        result += `${this.$dot(item.color)}`;
+        result += `<span style="font-weight:bold;">${item.seriesName}</span>`;
+        result += `<span style="float:right;margin-left:20px;font-weight:bold;">${item.value}</span>`;
+        result += '</div>';
+      });
+      return result;
+    };
+  }
+
+  /**
+   * 生成基础配置
+   */
+  $baseOption(overrides = {}) {
+    return {
+      aria: {
+        show: true,
+      },
+      backgroundColor: this.$theme().color.backgroundColor,
+      color: this.$palette(),
+      ...overrides,
+    };
+  }
+
+  /**
+   * 为容器下的svg额外添加类名标签, 避免figure svg深色模式下的选择器影响ECharts
+   */
+  $tagEchartsSvg(container) {
+    const svg = container && container.querySelector && container.querySelector('svg');
+    if (svg) svg.classList.add('echarts-svg');
+  }
+
+  /**
+   * 销毁图表实例
+   */
+  destroyChart(target) {
+    let container = null;
+    let inst = null;
+
+    if (target && typeof target.getDom === 'function') {
+      inst = target;
+      container = inst.getDom && inst.getDom();
+    } else if (target instanceof Element) {
+      container = target;
+      inst = this.echartsRef.getInstanceByDom(container);
+    }
+
+    if (inst && !inst.isDisposed()) inst.dispose();
+    if (inst) this.instances.delete(inst);
+  }
+
+  /**
+   * 创建或复用图表实例
+   * @param {Element} container 容器元素
+   * @param {Object} [option] ECharts 配置
+   * @param {*} [type] 图表类型（用于附加交互等）
+   * @param {Object} [themeObj] 主题对象（不传则根据 CSS 变量计算）
+   * @returns {*}
+   */
+  createChart(container, option = {}, type, themeObj) {
+    if (!container) return null;
+    // 已存在实例直接返回，避免被观察器和延迟初始化同时触发导致重复初始化
+    const existed = this.echartsRef.getInstanceByDom(container);
+    if (existed && !existed.isDisposed()) return existed;
+    const root = container.closest('.cherry') || container.closest('.cherry-markdown') || this.$getCherryRoot();
+    const theme = themeObj || this.$buildEchartsThemeFromCss(root);
+
+    if (container.firstChild) container.innerHTML = '';
+
+    const chart = this.echartsRef.init(container, theme, this.options);
+    if (option && Object.keys(option).length) chart.setOption(option);
+
+    this.instances.add(chart);
+    this.$tagEchartsSvg(container);
+    this.$enableThemeObserver(container);
+    this.$enableExportObserver(container);
+
+    if (type === 'heatmap' || type === 'pie') this.addClickHighlightEffect(chart, type);
+
+    return chart;
+  }
+
+  /**
+   * 读取 CSS 变量
+   */
+  $readCssVar(el, name, fallback) {
+    try {
+      const v = getComputedStyle(el).getPropertyValue(name).trim();
+      return v || fallback;
+    } catch (e) {
+      return fallback;
+    }
+  }
+
+  /**
+   * 从 classList 中提取主题名 theme__xxx -> xxx
+   */
+  $extractThemeNameFromClassList(classList) {
+    try {
+      const arr = Array.from(classList || []);
+      const t = arr.find((c) => c.startsWith('theme__'));
+      return t ? t.replace('theme__', '') : 'default';
+    } catch (e) {
+      return 'default';
+    }
+  }
+
+  /**
+   * 基于容器所在根节点获取主题缓存 key
+   */
+  $themeCacheKey(rootEl) {
+    const root = rootEl || this.$getCherryRoot();
+    const host = root || document.body;
+    return this.$extractThemeNameFromClassList((host && host.classList) || []);
+  }
+
+  /**
+   * 基于CSS变量构建ECharts主题，并同步到运行时主题
+   */
+  $buildEchartsThemeFromCss(rootEl) {
+    const el = rootEl || this.$getCherryRoot();
+    const cacheKey = this.$themeCacheKey(el);
+    if (this.themeCache.has(cacheKey)) {
+      const cached = this.themeCache.get(cacheKey);
+      this.themeRuntime = cached.runtime;
+      return cached.echarts;
+    }
+    const bg = this.$readCssVar(el, '--base-previewer-bg', this.$readCssVar(el, '--base-editor-bg', 'transparent'));
+    const text = this.$readCssVar(el, '--base-font-color', THEME.color.text);
+    const border = this.$readCssVar(el, '--md-table-border', THEME.color.border);
+    const split = this.$readCssVar(el, '--md-hr-border', THEME.color.border);
+
+    const isDarkLike = (() => {
+      const hexColor = String(bg || '').toLowerCase();
+      // 较深的背景可视作暗色
+      return hexColor.includes('#0') || hexColor.includes('#1') || hexColor.includes('#2') || hexColor.includes('#3');
+    })();
+
+    // 更新运行时主题
+    const runtime = {
+      color: {
+        border,
+        borderHover: border,
+        text,
+        tooltipText: isDarkLike ? THEME.color.tooltipTextDark : THEME.color.tooltipText,
+        lineSplit: split,
+        backgroundColor: bg,
+        tooltipBg: isDarkLike ? bg : 'white',
+        emphasis: THEME.color.emphasis,
+      },
+      shadow: { ...THEME.shadow },
+      fontSize: { ...THEME.fontSize },
+    };
+    this.themeRuntime = runtime;
+
+    // 返回echarts.init要传入的主题对象
+    const echartsTheme = {
+      backgroundColor: bg,
+      textStyle: { color: text },
+      title: { textStyle: { color: text } },
+      legend: { textStyle: { color: text } },
+      tooltip: {
+        backgroundColor: this.$theme().color.tooltipBg,
+        borderColor: border,
+        textStyle: { color: this.$theme().color.tooltipText },
+      },
+      categoryAxis: {
+        axisLine: { lineStyle: { color: text } },
+        axisLabel: { color: text },
+        splitLine: { lineStyle: { color: split } },
+      },
+      valueAxis: {
+        axisLine: { lineStyle: { color: text } },
+        axisLabel: { color: text },
+        splitLine: { lineStyle: { color: split } },
+      },
+      color: this.$palette(),
+    };
+    this.themeCache.set(cacheKey, { echarts: echartsTheme, runtime });
+    return echartsTheme;
+  }
+
+  /**
+   * 获取当前运行时主题
+   */
+  $theme() {
+    return this.themeRuntime || THEME;
+  }
+
+  /**
+   * 获取 Cherry 根容器
+   */
+  $getCherryRoot(container = null) {
+    if (container) {
+      const root = container.closest('.cherry') || container.closest('.cherry-markdown');
+      if (root) return root;
+    }
+    return document.querySelector('.cherry') || document.querySelector('.cherry-markdown') || document.body;
+  }
+
+  /**
+   * 启用主题变更观察器
+   */
+  $enableThemeObserver(container) {
+    const root = this.$getCherryRoot(container);
+    if (!root) return;
+    if (this.themeObservers.has(root)) return;
+    const observer = new MutationObserver(() => {
+      this.$buildEchartsThemeFromCss(root);
+      Array.from(this.instances).forEach((inst) => {
+        this.$setInstanceTheme(inst);
+      });
+    });
+    observer.observe(root, { attributes: true, attributeFilter: ['class'] });
+    this.themeObservers.set(root, observer);
+  }
+
+  /**
+   * 通过 echartsInstance.setOption 刷新主题
+   * @param {*} instance ECharts 实例
+   */
+  $setInstanceTheme(instance) {
+    if (!instance || typeof instance.getDom !== 'function') return;
+    const container = instance.getDom();
+    if (!container) return;
+    const root = this.$getCherryRoot(container);
+    // 从缓存读取主题对象
+    const cacheKey = this.$themeCacheKey(root);
+    const cached = this.themeCache.get(cacheKey);
+    const themeObj = cached && cached.echarts;
+    if (!themeObj) return;
+    const option = this.$chartOptionsFromDataset(container) || {};
+    instance.setOption(option, true);
+    this.$tagEchartsSvg(container);
+  }
+
+  /**
+   * 从容器 `data-*` 属性解析并生成 Option 图表配置
+   */
+  $chartOptionsFromDataset(container) {
+    const type = container.getAttribute('data-chart-type');
+    const tableDataStr = container.getAttribute('data-table-data');
+    const chartOptionsStr = container.getAttribute('data-chart-options');
+    let tableData = null;
+    let chartOptions = {};
+    try {
+      tableData = tableDataStr ? JSON.parse(tableDataStr) : null;
+    } catch (e) {
+      tableData = null;
+    }
+    try {
+      chartOptions = chartOptionsStr ? JSON.parse(chartOptionsStr) : {};
+    } catch (e) {
+      chartOptions = {};
+    }
+    if (!type || !tableData) return {};
+    const renderDict = {
+      bar: this.renderBarChart.bind(this),
+      line: this.renderLineChart.bind(this),
+      radar: this.renderRadarChart.bind(this),
+      map: this.renderMapChart.bind(this),
+      heatmap: this.renderHeatmapChart.bind(this),
+      pie: this.renderPieChart.bind(this),
+      scatter: this.renderScatterChart.bind(this),
+    };
+    const renderFn = renderDict[type];
+    return renderFn ? renderFn(tableData, chartOptions) : {};
+  }
+
+  /**
+   * 获取或创建实例
+   */
+  getInstance(container) {
+    // 如果传入具体容器，则优先对该容器进行实例化与复用
+    if (container) {
+      let chart = this.echartsRef.getInstanceByDom(container);
+      if (!chart) chart = this.createChart(container);
+      return chart;
+    }
+
+    // 无容器时，创建一个内部容器
+    if (!this.dom) {
+      this.dom = document.createElement('div');
+      const root = this.$getCherryRoot();
+      const themeObj = this.$buildEchartsThemeFromCss(root);
+      const chart = this.echartsRef.init(this.dom, themeObj, this.options);
+      this.instances.add(chart);
+    }
+    return this.echartsRef.getInstanceByDom(this.dom);
+  }
+
+  /**
+   * 定向重建一组容器对应的图表
+   */
+  $rehydrateChartsForContainers(containersSet, rootEl) {
+    const root = rootEl || this.$getCherryRoot();
+    const themeObj = this.$buildEchartsThemeFromCss(root);
+    containersSet.forEach((container) => {
+      if (!(container instanceof Element) || !container.isConnected) return;
+      const type = container.getAttribute('data-chart-type');
+      const option = this.$chartOptionsFromDataset(container);
+      try {
+        this.destroyChart(container);
+        this.createChart(container, option, type, themeObj);
+      } catch (e) {
+        Logger.warn('rehydrate (partial) chart failed:', e);
+      }
+    });
+  }
+
+  /**
+   * 启用导出完成事件观察器
+   * 一旦收到导出完成事件，则定向重建当前根容器下的所有图表容器
+   */
+  $enableExportObserver(container) {
+    const root = this.$getCherryRoot(container);
+    if (!root) return;
+    if (this.exportObservers.has(root)) return;
+    const handler = () => {
+      try {
+        const containersSet = new Set();
+        const found = root.querySelectorAll('.cherry-echarts-wrapper');
+        if (found && found.length) Array.from(found).forEach((el) => containersSet.add(el));
+        if (containersSet.size) this.$rehydrateChartsForContainers(containersSet, root);
+      } catch (e) {
+        Logger.warn('rehydrate after export failed:', e);
+      }
+    };
+    // 监听全局导出完成事件
+    window.addEventListener('cherry:export:done', handler);
+    this.exportObservers.set(root, handler);
+  }
+
+  /**
+   * 渲染入口：将表格数据渲染为指定类型图表，并返回 HTML 容器片段
+   */
+  render(type, options, tableObject) {
+    Logger.log('Rendering chart:', type, options, tableObject);
+    const handler = {
+      bar: BarChartOptionsHandler,
+      line: LineChartOptionsHandler,
+      radar: RadarChartOptionsHandler,
+      map: MapChartOptionsHandler,
+      heatmap: HeatmapChartOptionsHandler,
+      pie: PieChartOptionsHandler,
+      scatter: ScatterChartOptionsHandler,
+    }[type];
+
+    // 生成唯一ID和简化的配置数据
+    const chartId = `chart-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
+    // 序列化数据用于存储
+    const tableDataStr = JSON.stringify(tableObject);
+    const chartOptionsStr = JSON.stringify(options);
+
+    options.chartId = chartId;
+    options.engine = this;
+    const chartOption = handler ? generateOptions(handler, tableObject, options) : {};
+    Logger.log('Chart options:', chartOption);
+
+
+
+    // 创建一个包含所有必要信息的HTML结构
+    const htmlContent = `
+      <div class="cherry-echarts-wrapper" 
+           style="width: ${this.options.width}px; height: ${
+             this.options.height
+           }px; min-height: 300px; display: block; position: relative; border: 1px solid var(--md-table-border);" 
+           id="${chartId}"
+           data-chart-type="${type}"
+           data-table-data="${tableDataStr.replace(/"/g, '&quot;')}"
+           data-chart-options="${chartOptionsStr.replace(/"/g, '&quot;')}">
+      </div>
+    `;
+
+    // 延迟到下一轮事件循环再执行；只重试一次
+    setTimeout(() => {
+      const container = document.getElementById(chartId);
+      if (!container || !this.echartsRef) return;
+      if (this.echartsRef.getInstanceByDom(container)) return;
+      try {
+        this.createChart(container, chartOption, type);
+        Logger.log('Chart initialized successfully:', chartId);
+      } catch (error) {
+        Logger.error('Failed to render chart:', error);
+        Logger.error('Chart options:', chartOption);
+        Logger.error('Container:', container);
+        container.innerHTML = `<div style="text-align: center; line-height: 300px; color: red;">
+          图表渲染失败<br/>
+          <span style="font-size: 12px; color: #666;">错误: ${error.message}</span>
+        </div>`;
+      }
+    }, 50);
+
+    return htmlContent;
+  }
+
+  renderBarChart(tableObject, options) {
+    return this.$renderChartCommon(tableObject, options, 'bar');
+  }
+
+  renderLineChart(tableObject, options) {
+    return this.$renderChartCommon(tableObject, options, 'line');
+  }
+
+  renderRadarChart(tableObject, options) {
+    return this.$renderRadarChartCommon(tableObject, options);
+  }
+
+  renderHeatmapChart(tableObject, options) {
+    return this.$renderHeatmapChartCommon(tableObject, options);
+  }
+
+  renderPieChart(tableObject, options) {
+    return this.$renderPieChartCommon(tableObject, options);
+  }
+
+  renderScatterChart(tableObject, options) {
+    return this.$renderScatterChartCommon(tableObject, options);
+  }
+
+  $renderRadarChartCommon(tableObject, options) {
+    Logger.log('Rendering radar chart:', tableObject);
+
+    // 构建雷达图指标
+    const indicator = tableObject.header.slice(1).map((header) => {
+      const maxValue = Math.max(
+        ...tableObject.rows.map((row) => {
+          const index = tableObject.header.indexOf(header);
+          const value = this.$num(row[index]);
+          return value;
+        }),
+      );
+      return {
+        name: header,
+        max: Math.ceil(maxValue * 1.2), // 设置最大值为数据最大值的1.2倍，向上取整
+      };
+    });
+
+    const seriesData = tableObject.rows.map((row, index) => ({
+      name: row[0],
+      value: row.slice(1).map((data) => this.$num(data)),
+      areaStyle: {
+        opacity: 0.1 + index * 0.05, // 每个系列有不同的透明度
+      },
+      lineStyle: {
+        width: 2,
+      },
+      itemStyle: {
+        borderWidth: 2,
+      },
+    }));
+
+    Logger.log('Radar indicator:', indicator);
+    Logger.log('Radar seriesData:', seriesData);
+
+    const chartOptions = this.$baseOption({
+      tooltip: this.$tooltip({
+        trigger: 'item',
+        formatter(params) {
+          let result = `<div style="margin-bottom:4px;font-weight:bold;"><span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${params.color};"></span>${params.name}</div>`;
+          params.value.forEach(function (value, index) {
+            result += '<div style="margin:2px 0;">';
+            result += `<span style="font-weight:bold;">${indicator[index].name}</span>`;
+            result += `<span style="float:right;margin-left:20px;font-weight:bold;">${value}</span>`;
+            result += '</div>';
+          });
+          return result;
+        },
+      }),
+      legend: this.$legend({ data: tableObject.rows.map((row) => row[0]), top: 'bottom' }),
+      toolbox: this.$toolbox(),
+      radar: {
+        name: {
+          textStyle: {
+            fontWeight: 'bold',
+          },
+          formatter(name) {
+            return name.length > 6 ? `${name.substr(0, 6)}...` : name;
+          },
+        },
+        indicator,
+        radius: '60%',
+        center: ['50%', '50%'],
+        splitNumber: 5,
+        shape: 'polygon',
+        splitArea: {
+          areaStyle: {
+            color: this.$palette('radar').reverse(),
+          },
+        },
+        axisName: {
+          color: this.$theme().color.text,
+        },
+        axisLine: {
+          lineStyle: {
+            color: 'rgba(211, 253, 250, 0.8)',
+          },
+        },
+        splitLine: {
+          lineStyle: {
+            color: 'rgba(211, 253, 250, 0.8)',
+          },
+        },
+      },
+      series: [
+        this.$baseSeries('radar', {
+          name: '雷达图数据',
+          data: seriesData,
+          emphasis: { lineStyle: { width: 4 }, areaStyle: { opacity: 0.3 } },
+        }),
+      ],
+      graphic: {
+        elements: [
+          {
+            type: 'text',
+            left: 'center',
+            top: '5%',
+            style: {
+              text: '雷达图分析',
+              fontSize: 16,
+              fontWeight: 'bold',
+              fill: this.$theme().color.text,
+            },
+          },
+        ],
+      },
+    });
+    return chartOptions;
+  }
+
+  $renderHeatmapChartCommon(tableObject, options) {
+    Logger.log('Rendering heatmap chart:', tableObject);
+
+    // 构建热力图数据
+    const xAxisData = tableObject.header.slice(1); // 列标题作为x轴
+    const yAxisData = tableObject.rows.map((row) => row[0]); // 行标题作为y轴
+    const data = [];
+    // 构建热力图数据点 [x索引, y索引, 值]
+    tableObject.rows.forEach((row, yIndex) => {
+      row.slice(1).forEach((value, xIndex) => {
+        const numValue = this.$num(value);
+        data.push([xIndex, yIndex, numValue]);
+      });
+    });
+
+    // 计算数值范围用于颜色映射
+    const values = data.map((item) => item[2]);
+    const minValue = Math.min(...values);
+    const maxValue = Math.max(...values);
+
+    const chartOptions = this.$baseOption({
+      tooltip: this.$tooltip({
+        trigger: 'item',
+        formatter(params) {
+          return `${yAxisData[params.data[1]]}<br/>${xAxisData[params.data[0]]}: <strong>${params.data[2]}</strong>`;
+        },
+      }),
+      grid: this.$grid({
+        height: '50%',
+        top: '10%',
+        left: '10%',
+        right: '10%',
+      }),
+      xAxis: this.$axis('category', {
+        data: xAxisData,
+        splitArea: {
+          show: true,
+        },
+      }),
+      yAxis: this.$axis('category', {
+        data: yAxisData,
+        splitArea: {
+          show: true,
+        },
+      }),
+      visualMap: {
+        min: minValue,
+        max: maxValue,
+        calculable: true,
+        orient: 'horizontal',
+        left: 'center',
+        bottom: '15%',
+        inRange: {
+          color: this.$palette('heatmap'),
+        },
+        textStyle: {
+          color: this.$theme().color.text,
+          fontSize: this.$theme().fontSize.base,
+        },
+      },
+      series: [
+        this.$baseSeries('heatmap', {
+          name: '热力图数据',
+          data,
+          label: { show: true, fontSize: 10 },
+          emphasis: {
+            itemStyle: {
+              shadowBlur: this.$theme().shadow.blur,
+              shadowColor: this.$theme().shadow.color,
+              borderWidth: 2,
+              borderColor: this.$theme().color.emphasis,
+            },
+          },
+          select: { itemStyle: { borderWidth: 2, borderColor: this.$theme().color.emphasis, opacity: 1 } },
+          selectedMode: 'single',
+          animationEasing: 'cubicOut',
+        }),
+      ],
+      toolbox: this.$toolbox({}, { top: 'bottom' }),
+    });
+    return chartOptions;
+  }
+
+  $renderPieChartCommon(tableObject, options) {
+    Logger.log('Rendering pie chart:', tableObject);
+
+    // 构建饼图数据
+    const data = tableObject.rows.map((row) => ({ name: row[0], value: this.$num(row[1]) }));
+
+    const chartOptions = this.$baseOption({
+      tooltip: this.$tooltip({ trigger: 'item', formatter: '{a} <br/>{b}: {c} ({d}%)' }),
+      legend: this.$legend({ orient: 'vertical', left: 'left', top: 'middle' }),
+      series: [
+        this.$baseSeries('pie', {
+          name: '数据分布',
+          radius: ['40%', '70%'],
+          center: ['50%', '50%'],
+          avoidLabelOverlap: false,
+          label: { show: false, position: 'center' },
+          emphasis: {
+            label: { show: true, fontSize: '18', fontWeight: 'bold' },
+            itemStyle: {
+              shadowBlur: this.$theme().shadow.blur,
+              shadowOffsetX: 0,
+              shadowColor: this.$theme().shadow.color,
+              borderWidth: 3,
+              borderColor: this.$theme().color.emphasis,
+            },
+          },
+          select: { itemStyle: { borderWidth: 3, borderColor: this.$theme().color.emphasis, opacity: 1 } },
+          selectedMode: 'single',
+          labelLine: { show: false },
+          data,
+          animationEasing: 'cubicOut',
+        }),
+      ],
+      toolbox: this.$toolbox(),
+    });
+    return chartOptions;
+  }
+
+  $renderScatterChartCommon(tableObject, options) {
+    Logger.log('Rendering scatter chart:', tableObject);
+
+    // 支持两种形式：
+    // 1) 单系列：| :scatter:{name,x,y,size?} | X | Y | Size? |
+    // 2) 多系列：| :scatter:{group,name,x,y,size?} | X | Y | Size? | Series |
+    const headers = tableObject.header;
+    const findHeader = (candidates) =>
+      headers.findIndex((h, i) => i > 0 && candidates.some((c) => String(h).toLowerCase().includes(c)));
+    const xCol = findHeader(['x']);
+    const yCol = findHeader(['y']);
+    const sizeCol = findHeader(['size', '大小']);
+    let groupCol = findHeader(['series', 'group', '分组', '系列']);
+    // 如果列数达到 name,x,y,size,group 的长度，但没识别出来，则默认最后一列为分组
+    if (groupCol <= 0 && headers.length >= 5) {
+      groupCol = headers.length - 1;
+    }
+
+    const hasSizeColumn = sizeCol > 0;
+    const hasGroupColumn = groupCol > 0;
+
+    // 解析为统一对象
+    const parsedRows = tableObject.rows.map((row) => {
+      const x = this.$num(row[xCol > 0 ? xCol : 1]);
+      const y = this.$num(row[yCol > 0 ? yCol : 2]);
+      const size = hasSizeColumn ? this.$num(row[sizeCol]) : undefined;
+      const seriesName = hasGroupColumn ? String(row[groupCol] ?? '').trim() || '系列1' : null;
+      return { name: row[0], x, y, size, seriesName };
+    });
+
+    // 如果提供有 size 列，使用线性归一化（6~28）来控制点的显示大小
+    let minSize = Infinity;
+    let maxSize = -Infinity;
+    if (hasSizeColumn) {
+      parsedRows.forEach((r) => {
+        if (typeof r.size === 'number' && !Number.isNaN(r.size)) {
+          minSize = Math.min(minSize, r.size);
+          maxSize = Math.max(maxSize, r.size);
+        }
+      });
+      if (!Number.isFinite(minSize) || !Number.isFinite(maxSize)) {
+        minSize = 0;
+        maxSize = 0;
+      }
+    }
+
+    // 构建 series 数据
+    let series = [];
+    if (hasGroupColumn) {
+      const groupMap = new Map();
+      parsedRows.forEach((r) => {
+        const item = { value: [r.x, r.y], name: r.name };
+        if (hasSizeColumn) {
+          if (maxSize === minSize) {
+            item.symbolSize = 12;
+          } else if (typeof r.size === 'number' && !Number.isNaN(r.size)) {
+            const t = (r.size - minSize) / (maxSize - minSize);
+            item.symbolSize = Math.round(6 + t * (28 - 6));
+          } else {
+            item.symbolSize = 10;
+          }
+        }
+        const key = r.seriesName;
+        if (!groupMap.has(key)) groupMap.set(key, []);
+        groupMap.get(key).push(item);
+      });
+      series = Array.from(groupMap.entries()).map(([name, data]) =>
+        this.$baseSeries('scatter', {
+          name,
+          data,
+          emphasis: {
+            focus: 'series',
+            itemStyle: {
+              shadowBlur: this.$theme().shadow.blur,
+              shadowColor: this.$theme().shadow.color,
+              borderWidth: 2,
+              borderColor: this.$theme().color.emphasis,
+            },
+          },
+          select: { itemStyle: { borderWidth: 2, borderColor: this.$theme().color.emphasis, opacity: 1 } },
+          selectedMode: 'single',
+          animationEasing: 'cubicOut',
+        }),
+      );
+    } else {
+      const data = parsedRows.map((r) => {
+        const item = { value: [r.x, r.y], name: r.name };
+        if (hasSizeColumn) {
+          if (maxSize === minSize) item.symbolSize = 12;
+          else if (typeof r.size === 'number' && !Number.isNaN(r.size)) {
+            const t = (r.size - minSize) / (maxSize - minSize);
+            item.symbolSize = Math.round(6 + t * (28 - 6));
+          } else item.symbolSize = 10;
+        }
+        return item;
+      });
+      series = [
+        this.$baseSeries('scatter', {
+          name: '散点',
+          data,
+          emphasis: {
+            focus: 'series',
+            itemStyle: {
+              borderWidth: 2,
+              borderColor: this.$theme().color.emphasis,
+            },
+          },
+          select: { itemStyle: { borderWidth: 2, borderColor: this.$theme().color.emphasis, opacity: 1 } },
+          selectedMode: 'single',
+          animationEasing: 'cubicOut',
+        }),
+      ];
+    }
+
+    const chartOptions = this.$baseOption({
+      tooltip: this.$tooltip({
+        trigger: 'item',
+        formatter(params) {
+          const [x, y] = params.value || [];
+          return `${params.name}<br/>x: <strong>${x}</strong><br/>y: <strong>${y}</strong>`;
+        },
+      }),
+      legend: this.$legend(),
+      toolbox: this.$toolbox({ dataZoom: {} }),
+      grid: this.$grid(),
+      xAxis: this.$axis('value'),
+      yAxis: this.$axis('value'),
+      series,
+    });
+
+    return chartOptions;
+  }
+
+  renderMapChart(tableObject, options) {
+    Logger.log('开始渲染地图图表，选项:', options);
+
+    // 检查options中是否有自定义地图数据源
+    if (options && options.mapDataSource) {
+      Logger.log('检测到自定义地图数据源:', options.mapDataSource);
+
+      // 优先使用用户自定义的地图数据源
+      // 如果当前已经有china地图数据，先清除它以确保使用新数据
+      if (window.echarts && window.echarts.getMap('china')) {
+        Logger.log('清除现有地图数据以使用自定义地图数据源');
+      }
+
+      // 立即开始加载自定义地图数据，这会覆盖默认地图数据
+      this.$loadCustomMapData(options.mapDataSource, true);
+    } else {
+      Logger.log('使用默认地图数据源');
+      // 只有在没有自定义数据源时才加载默认地图数据
+      this.$loadChinaMapData();
+    }
+
+    // 立即返回地图图表配置
+    return this.$renderMapChartCommon(tableObject, options);
+  }
+
+  /**
+   * 加载中国地图数据
+   */
+  $loadChinaMapData() {
+    if (typeof window.echarts === 'undefined') {
+      Logger.error('ECharts 库未加载');
+      return;
+    }
+
+    // 检查地图数据是否已加载
+    if (window.echarts.getMap('china')) {
+      Logger.log('中国地图数据已存在');
+      return;
+    }
+
+    Logger.log('正在加载中国地图数据...');
+
+    // 获取配置中的地图数据源URL，如果没有配置则使用默认值
+    let possiblePaths = [
+      'https://geo.datav.aliyun.com/areas_v3/bound/100000_full.json', // 在线高质量地图数据源（优先，已验证可用）
+      './assets/data/china.json', // 从examples目录访问本地备份文件
+    ];
+
+    // 如果有Cherry配置且配置了mapTable.sourceUrl，则使用配置的URL
+    if (
+      this.cherryOptions &&
+      this.cherryOptions.toolbars &&
+      this.cherryOptions.toolbars.config &&
+      this.cherryOptions.toolbars.config.mapTable &&
+      this.cherryOptions.toolbars.config.mapTable.sourceUrl
+    ) {
+      possiblePaths = this.cherryOptions.toolbars.config.mapTable.sourceUrl;
+      Logger.log('使用配置的地图数据源:', possiblePaths);
+    }
+
+    this.$tryLoadMapDataFromPaths(possiblePaths, 0);
+  }
+
+  /**
+   * 尝试从多个路径加载地图数据
+   */
+  $tryLoadMapDataFromPaths(paths, index) {
+    if (index >= paths.length) {
+      Logger.error('所有地图数据源都加载失败');
+      return;
+    }
+
+    const url = paths[index];
+    Logger.log(`尝试加载地图数据: ${url}`);
+
+    this.$fetchMapData(url).catch((error) => {
+      Logger.warn(`地图数据加载失败 (${url}):`, error.message);
+      // 尝试下一个路径
+      this.$tryLoadMapDataFromPaths(paths, index + 1);
+    });
+  }
+
+  /**
+   * 获取地图数据
+   */
+  $fetchMapData(url) {
+    return fetch(url)
+      .then((response) => {
+        if (!response.ok) {
+          throw new Error(`HTTP error! status: ${response.status} for ${url}`);
+        }
+        return response.json();
+      })
+      .then((geoJson) => {
+        // 注册地图数据
+        window.echarts.registerMap('china', geoJson);
+        Logger.log(`中国地图数据加载成功！来源: ${url}`);
+
+        // 触发重新渲染已有的地图图表
+        this.$refreshMapCharts();
+        return geoJson;
+      });
+  }
+
+  /**
+   * 加载自定义地图数据
+   * @param {string} mapUrl - 地图数据URL
+   * @param {boolean} forceReload - 是否强制重新加载
+   */
+  $loadCustomMapData(mapUrl, forceReload = false) {
+    if (!mapUrl || mapUrl.trim() === '') {
+      Logger.warn('自定义地图数据URL为空，使用默认加载方法');
+      return;
+    }
+
+    Logger.log(`正在加载用户自定义地图数据: ${mapUrl}${forceReload ? ' (强制重新加载)' : ''}`);
+
+    // 优先加载用户自定义的地图数据，覆盖任何已有的地图数据
+    this.$fetchMapData(mapUrl)
+      .then(() => {
+        Logger.log('用户自定义地图数据加载成功，正在刷新所有地图图表');
+        // 地图数据加载成功后，立即刷新页面中的所有地图图表
+        this.$refreshMapCharts();
+      })
+      .catch((error) => {
+        Logger.warn(`用户自定义地图数据加载失败 (${mapUrl}):`, error.message);
+        Logger.warn('自定义地图数据加载失败，回退到默认地图数据');
+        // 如果用户自定义URL失败，回退到默认地图数据
+        this.$loadChinaMapData();
+      });
+  }
+
+  /**
+   * 刷新页面中的地图图表
+   */
+  $refreshMapCharts() {
+    // 查找页面中所有的地图图表容器，重新渲染
+    const mapContainers = document.querySelectorAll('[id^="chart-"][data-chart-type="map"]');
+    Logger.log('Found map containers to refresh:', mapContainers.length);
+
+    mapContainers.forEach((container) => {
+      const chartId = container.id;
+      Logger.log('Refreshing map chart:', chartId);
+
+      // 从 data 属性获取存储的表格数据
+      const tableDataStr = container.getAttribute('data-table-data');
+      const chartOptionsStr = container.getAttribute('data-chart-options');
+
+      if (tableDataStr && this.echartsRef) {
+        try {
+          const tableData = JSON.parse(tableDataStr);
+          const chartOptions = chartOptionsStr ? JSON.parse(chartOptionsStr) : {};
+
+          const chartOption = this.$renderMapChartCommon(tableData, chartOptions);
+          const existingChart = this.echartsRef.getInstanceByDom(container);
+
+          if (existingChart) {
+            existingChart.setOption(chartOption);
+            Logger.log('Map chart refreshed successfully:', chartId);
+          } else {
+            // 重新创建图表
+            const newChart = this.getInstance(container);
+            newChart.setOption(chartOption);
+            Logger.log('Map chart recreated:', chartId);
+          }
+        } catch (error) {
+          Logger.error('Failed to refresh map chart:', chartId, error);
+        }
+      }
+    });
+  }
+
+  $renderMapChartCommon(tableObject, options) {
+    Logger.log('Rendering map chart:', tableObject);
+
+    // 检查 ECharts 是否可用
+    if (typeof window.echarts === 'undefined') {
+      Logger.error('ECharts 库未加载');
+      return {
+        title: {
+          text: '地图渲染失败: ECharts 库未加载',
+          left: 'center',
+          textStyle: { color: '#ff0000' },
+        },
+      };
+    }
+
+    // 检查中国地图数据是否已注册
+    if (!window.echarts.getMap('china')) {
+      Logger.warn('中国地图数据未加载，正在尝试加载...');
+
+      // 异步加载地图数据
+      this.$loadChinaMapData();
+
+      // 返回加载提示，稍后会被替换
+      return {
+        title: {
+          text: '正在加载地图数据...',
+          left: 'center',
+          top: 'middle',
+          textStyle: {
+            color: '#666',
+            fontSize: 16,
+          },
+        },
+        graphic: {
+          elements: [
+            {
+              type: 'text',
+              left: 'center',
+              top: '60%',
+              style: {
+                text: '如果长时间未显示，请检查网络连接',
+                font: '12px sans-serif',
+                fill: '#999',
+              },
+            },
+          ],
+        },
+      };
+    }
+
+    // 省份名称映射表
+    const provinceNameMap = {
+      北京: '北京市',
+      天津: '天津市',
+      上海: '上海市',
+      重庆: '重庆市',
+      河北: '河北省',
+      山西: '山西省',
+      辽宁: '辽宁省',
+      吉林: '吉林省',
+      黑龙江: '黑龙江省',
+      江苏: '江苏省',
+      浙江: '浙江省',
+      安徽: '安徽省',
+      福建: '福建省',
+      江西: '江西省',
+      山东: '山东省',
+      河南: '河南省',
+      湖北: '湖北省',
+      湖南: '湖南省',
+      广东: '广东省',
+      海南: '海南省',
+      四川: '四川省',
+      贵州: '贵州省',
+      云南: '云南省',
+      陕西: '陕西省',
+      甘肃: '甘肃省',
+      青海: '青海省',
+      台湾: '台湾省',
+      内蒙古: '内蒙古自治区',
+      广西: '广西壮族自治区',
+      西藏: '西藏自治区',
+      宁夏: '宁夏回族自治区',
+      新疆: '新疆维吾尔自治区',
+      香港: '香港特别行政区',
+      澳门: '澳门特别行政区',
+    };
+
+    // 名称标准化函数
+    const normalizeProvinceName = (inputName) => {
+      // 移除可能的空格
+      const cleanName = inputName.trim();
+
+      // 直接匹配映射表
+      if (provinceNameMap[cleanName]) {
+        return provinceNameMap[cleanName];
+      }
+
+      // 如果输入已经是完整名称，直接返回
+      if (
+        cleanName.endsWith('市') ||
+        cleanName.endsWith('省') ||
+        cleanName.endsWith('自治区') ||
+        cleanName.endsWith('特别行政区')
+      ) {
+        return cleanName;
+      }
+
+      // 模糊匹配：查找包含输入名称的省份
+      for (const [shortName, fullName] of Object.entries(provinceNameMap)) {
+        if (fullName.includes(cleanName) || cleanName.includes(shortName)) {
+          return fullName;
+        }
+      }
+
+      // 如果都没匹配到，返回原名称
+      Logger.warn(`Province name not matched: ${inputName}`);
+      return cleanName;
+    };
+
+    // 构建地图数据，使用标准化的省份名称
+    const mapData = tableObject.rows.map((row) => {
+      const originalName = row[0];
+      const standardName = normalizeProvinceName(originalName);
+      const value = this.$num(row[1]);
+
+      Logger.log(`Name mapping: "${originalName}" -> "${standardName}"`);
+
+      return { name: standardName, value };
+    });
+
+    Logger.log('Map data:', mapData);
+
+    // 使用 ECharts 内置的中国地图
+    const chartOptions = this.$baseOption({
+      title: {
+        text: '地图数据分析',
+        left: 'center',
+        top: '5%',
+        textStyle: {
+          fontSize: 16,
+          fontWeight: 'bold',
+          color: this.$theme().color.text,
+        },
+      },
+      tooltip: this.$tooltip({
+        trigger: 'item',
+        formatter(params) {
+          return `${params.name}: ${params.value || 0}`;
+        },
+      }),
+      visualMap: {
+        min: Math.min(...mapData.map((item) => item.value)),
+        max: Math.max(...mapData.map((item) => item.value)),
+        left: 'left',
+        top: 'bottom',
+        text: ['高', '低'],
+        calculable: true,
+        inRange: {
+          color: this.$palette('map'),
+        },
+        textStyle: {
+          color: this.$theme().color.text,
+          fontSize: this.$theme().fontSize.base,
+        },
+      },
+      series: [
+        {
+          name: '地图数据',
+          type: 'map',
+          map: 'china',
+          roam: true,
+          label: {
+            show: true,
+            fontSize: 10,
+          },
+          emphasis: {
+            label: {
+              show: true,
+              fontSize: this.$theme().fontSize.base,
+              fontWeight: 'bold',
+            },
+            itemStyle: {
+              areaColor: '#ffefd5',
+            },
+          },
+          data: mapData,
+          itemStyle: {
+            areaColor: '#f5f5f5',
+            borderColor: '#999',
+            borderWidth: 0.5,
+          },
+        },
+      ],
+      toolbox: this.$toolbox(),
+    });
+    return chartOptions;
+  }
+
+  $renderChartCommon(tableObject, options, type) {
+    Logger.log('Common chart rendering:', type, tableObject);
+
+    if (!['bar', 'line'].includes(type)) {
+      return {};
+    }
+
+    const dataSet = tableObject.rows.reduce(
+      (result, row) => {
+        Logger.log('Processing row:', row);
+        result.legend.data.push(row[0]);
+        result.series.push({
+          ...this.$baseSeries(type),
+          name: row[0],
+          data: row.slice(1).map((data) => {
+            const num = this.$num(data);
+            Logger.log('Parsed data:', data, '->', num);
+            return num;
+          }),
+        });
+        return result;
+      },
+      {
+        legend: this.$legend({ data: [] }),
+        series: [],
+      },
+    );
+
+    const chartOptions = this.$baseOption({
+      ...dataSet,
+      tooltip: this.$tooltip({
+        trigger: 'axis',
+        axisPointer: {
+          type: type === 'line' ? 'cross' : 'shadow',
+          label: { backgroundColor: '#6a7985' },
+          crossStyle: { color: '#999' },
+        },
+        formatter: this.$tooltipAxisFormatter(),
+      }),
+      toolbox: this.$toolbox({
+        mark: { show: true, title: '辅助线开关' },
+        magicType: { show: true, type: ['line', 'bar'], title: { line: '切换为折线图', bar: '切换为柱状图' } },
+      }),
+      xAxis: this.$axis('category', {
+        data: tableObject.header.slice(1),
+        axisTick: { alignWithLabel: true },
+        axisLabel: {
+          textStyle: { color: this.$theme().color.text },
+          rotate: tableObject.header.slice(1).some((h) => h.length > 4) ? 45 : 0,
+          interval: 0,
+        },
+      }),
+      yAxis: this.$axis('value', {
+        axisLabel: {
+          textStyle: { color: this.$theme().color.text },
+          formatter(value) {
+            if (value >= 1000000) return `${(value / 1000000).toFixed(1)}M`;
+            if (value >= 1000) return `${(value / 1000).toFixed(1)}K`;
+            return value;
+          },
+        },
+        nameTextStyle: { color: this.$theme().color.text },
+      }),
+      grid: this.$grid({ left: '3%', top: '15%' }),
+      dataZoom: this.$dataZoom(tableObject.header.length > 8),
+      brush: { toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'], xAxisIndex: 0 },
+    });
+
+    Logger.log('Final chart options:', chartOptions);
+    return chartOptions;
+  }
+
+  // 添加点击高亮效果
+  addClickHighlightEffect(chartInstance, chartType) {
+    let selectedDataIndex = null;
+    chartInstance.on('click', (params) => {
+      Logger.log('Chart clicked:', params);
+      // 如果点击的是同一个数据项，则取消高亮
+      if (selectedDataIndex === params.dataIndex) {
+        selectedDataIndex = null;
+        this.clearHighlight(chartInstance, chartType);
+        return;
+      }
+      // 记录当前选中的数据项
+      selectedDataIndex = params.dataIndex;
+    });
+  }
+  // 清除高亮效果
+  clearHighlight(chartInstance, chartType) {
+    // 取消ECharts内置的高亮
+    chartInstance.dispatchAction({
+      type: 'downplay',
+      seriesIndex: 0,
+    });
+    // 恢复所有数据项的原始样式
+    const option = chartInstance.getOption();
+    const seriesData = option.series[0].data;
+    seriesData.forEach((item) => {
+      if (item.itemStyle) {
+        delete item.itemStyle.opacity;
+        delete item.itemStyle.borderWidth;
+        delete item.itemStyle.borderColor;
+      }
+    });
+    chartInstance.setOption({
+      series: [
+        {
+          data: seriesData,
+        },
+      ],
+    });
+  }
+
+  onDestroy() {
+    if (this.instances && this.instances.size > 0) {
+      this.instances.forEach((inst) => {
+        this.destroyChart(inst);
+      });
+      this.instances.clear();
+    }
+    if (this.themeObservers && this.themeObservers.size) {
+      this.themeObservers.forEach((observer) => {
+        observer.disconnect();
+      });
+      this.themeObservers.clear();
+    }
+    if (this.exportObservers && this.exportObservers.size) {
+      this.exportObservers.forEach((handler) => {
+        window.removeEventListener('cherry:export:done', handler);
+      });
+      this.exportObservers.clear();
+    }
+    if (this.dom) {
+      const inst = this.echartsRef.getInstanceByDom(this.dom);
+      if (inst && !inst.isDisposed()) inst.dispose();
+      this.dom = null;
+    }
+  }
+}
diff --git a/packages/cherry-markdown/src/core/hooks/Table.js b/packages/cherry-markdown/src/core/hooks/Table.js
index 0a8033b..aa7499e 100644
--- a/packages/cherry-markdown/src/core/hooks/Table.js
+++ b/packages/cherry-markdown/src/core/hooks/Table.js
@@ -79,16 +79,50 @@ export default class Table extends ParagraphBase {
       return null;
     }
     const match = cell.match(CHART_REGEX);
-    const [, chartType, axisOptions] = match;
-    const DEFAULT_AXIS_OPTIONS = ['x', 'y'];
+    const [, chartType, options] = match;
     const result = {
       type: chartType,
-      options: axisOptions ? axisOptions.split(/\s*,\s*/) : DEFAULT_AXIS_OPTIONS,
+      options: options ? this.$parseProps(options) : {},
     };
     Logger.log('Parsed chart options:', result);
     return result;
   }
 
+  // Parse "key: value, other: 123" style strings from PR #1349
+  $parseProps(str) {
+    const result = {};
+    // Match key: value pairs, support unquoted, quoted, numbers etc
+    const pairs = str
+      .split(',')
+      .map((s) => s.trim())
+      .filter(Boolean);
+
+    const kvRegex = /^(\w+|\s*".*?"\s*|\s*'.*?'\s*)\s*:\s*(.+?)$/;
+
+    for (const pair of pairs) {
+      const kvMatch = pair.match(kvRegex);
+      if (kvMatch) {
+        const k = kvMatch[1].trim().replace(/^["']|["']$/g, ''); // Remove quotes
+        let v = kvMatch[2].trim();
+
+        // Try to convert numbers
+        if (/^-?\d+(\.\d+)?$/.test(v)) {
+          v = Number(v);
+        } else if (v === 'true') {
+          v = true;
+        } else if (v === 'false') {
+          v = false;
+        } else {
+          v = v.replace(/^["']|["']$/g, ''); // Remove quotes from values too
+        }
+
+        result[k] = v;
+      }
+    }
+
+    return result;
+  }
+
   $parseColumnAlignRules(row) {
     const COLUMN_ALIGN_MAP = { L: 'left', R: 'right', C: 'center' };
     const COLUMN_ALIGN_CACHE_SIGN = ['U', 'L', 'R', 'C']; // U for undefined
diff --git a/packages/cherry-markdown/src/toolbars/hooks/ProTable.js b/packages/cherry-markdown/src/toolbars/hooks/ProTable.js
index b0fe913..9036324 100644
--- a/packages/cherry-markdown/src/toolbars/hooks/ProTable.js
+++ b/packages/cherry-markdown/src/toolbars/hooks/ProTable.js
@@ -84,7 +84,7 @@ export default class ProTable extends MenuBase {
    */
   insertLineTable(selection) {
     return `${selection}\n\n${[
-      '| :line: {x,y} | a | b | c |',
+      '| :line: {title: 折线图,} | a | b | c |',
       '| :-: | :-: | :-: | :-: |',
       '| x | 1 | 2 | 3 |',
       '| y | 2 | 4 | 6 |',
@@ -97,7 +97,7 @@ export default class ProTable extends MenuBase {
    */
   insertBarTable(selection) {
     return `${selection}\n\n${[
-      '| :bar: {x,y} | a | b | c |',
+      '| :bar: {title: 柱状图,} | a | b | c |',
       '| :-: | :-: | :-: | :-: |',
       '| x | 1 | 2 | 3 |',
       '| y | 2 | 4 | 6 |',
@@ -110,7 +110,7 @@ export default class ProTable extends MenuBase {
    */
   insertRadarTable(selection) {
     return `${selection}\n\n${[
-      '| :radar: {x,y} | 技能1 | 技能2 | 技能3 | 技能4 | 技能5 |',
+      '| :radar: {title: 雷达图,} | 技能1 | 技能2 | 技能3 | 技能4 | 技能5 |',
       '| :-: | :-: | :-: | :-: | :-: | :-: |',
       '| 用户A | 90 | 85 | 75 | 80 | 88 |',
       '| 用户B | 75 | 90 | 88 | 85 | 78 |',
@@ -123,7 +123,7 @@ export default class ProTable extends MenuBase {
    */
   insertMapTable(selection) {
     return `${selection}\n\n${[
-      '| :map:{name,value} | 数值 |',
+      '| :map:{title: 地图, mapDataSource: https://geo.datav.aliyun.com/areas_v3/bound/100000_full.json,} | 数值 |',
       '| :-: | :-: |',
       '| 北京 | 120 |',
       '| 上海 | 280 |',
@@ -139,7 +139,7 @@ export default class ProTable extends MenuBase {
    */
   insertHeatmapTable(selection) {
     return `${selection}\n\n${[
-      '| :heatmap:{x,y,value} | 周一 | 周二 | 周三 | 周四 | 周五 |',
+      '| :heatmap:{title: 热力图,} | 周一 | 周二 | 周三 | 周四 | 周五 |',
       '| :-: | :-: | :-: | :-: | :-: | :-: |',
       '| 9:00 | 10 | 15 | 8 | 12 | 20 |',
       '| 12:00 | 25 | 30 | 18 | 22 | 35 |',
@@ -153,7 +153,7 @@ export default class ProTable extends MenuBase {
    */
   insertPieTable(selection) {
     return `${selection}\n\n${[
-      '| :pie:{name,value} | 数值 |',
+      '| :pie:{title: 饼图,} | 数值 |',
       '| :-: | :-: |',
       '| 苹果 | 35 |',
       '| 香蕉 | 25 |',
@@ -168,7 +168,7 @@ export default class ProTable extends MenuBase {
    */
   insertScatterTable(selection) {
     return `${selection}\n\n${[
-      '| :scatter: {group,name,x,y,size} | X | Y | Size | Series |',
+      '| :scatter: {title: 散点图, group,name,x,y,size} | X | Y | Size | Series |',
       '| :-: | :-: | :-: | :-: | :-: |',
       '| A1 | 10 | 20 | 5 | S1 |',
       '| A2 | 15 | 35 | 8 | S1 |',
-- 
2.50.1


From 1585a34173f672027cb28cf80ac68f72cca8406f Mon Sep 17 00:00:00 2001
From: "copilot-swe-agent[bot]" <198982749+Copilot@users.noreply.github.com>
Date: Thu, 14 Aug 2025 07:21:41 +0000
Subject: [PATCH 2/2] Add missing locale entries and chart icons from PR #1349

Co-authored-by: RSS1102 <81673017+RSS1102@users.noreply.github.com>
---
 packages/cherry-markdown/src/locales/en_US.js |  5 ++++-
 packages/cherry-markdown/src/locales/ru_RU.js | 21 +++++++++++--------
 packages/cherry-markdown/src/locales/zh_CN.js |  5 ++++-
 .../cherry-markdown/src/sass/ch-icon.scss     |  9 +++++++-
 .../src/sass/icons/uEA8A-insertLineChart.svg  |  1 +
 .../src/sass/icons/uEA8B-insertBarChart.svg   |  1 +
 .../src/sass/icons/uEA8C-insertRadarChart.svg |  1 +
 .../src/sass/icons/uEA8D-insertMapChart.svg   |  1 +
 .../sass/icons/uEA8E-insertHeatmapChart.svg   |  1 +
 .../src/sass/icons/uEA8F-insertPieChart.svg   |  1 +
 .../sass/icons/uEA90-insertScatterChart.svg   |  1 +
 11 files changed, 35 insertions(+), 12 deletions(-)
 create mode 100644 packages/cherry-markdown/src/sass/icons/uEA8A-insertLineChart.svg
 create mode 100644 packages/cherry-markdown/src/sass/icons/uEA8B-insertBarChart.svg
 create mode 100644 packages/cherry-markdown/src/sass/icons/uEA8C-insertRadarChart.svg
 create mode 100644 packages/cherry-markdown/src/sass/icons/uEA8D-insertMapChart.svg
 create mode 100644 packages/cherry-markdown/src/sass/icons/uEA8E-insertHeatmapChart.svg
 create mode 100644 packages/cherry-markdown/src/sass/icons/uEA8F-insertPieChart.svg
 create mode 100644 packages/cherry-markdown/src/sass/icons/uEA90-insertScatterChart.svg

diff --git a/packages/cherry-markdown/src/locales/en_US.js b/packages/cherry-markdown/src/locales/en_US.js
index 9d1e3e1..b9e7090 100644
--- a/packages/cherry-markdown/src/locales/en_US.js
+++ b/packages/cherry-markdown/src/locales/en_US.js
@@ -53,7 +53,10 @@ export default {
   barTable: 'Bar Table',
   radarTable: 'Radar Table',
   mapTable: 'Map Table',
-  proTable: 'Chart Table',
+  heatmapTable: 'Heatmap Table',
+  pieTable: 'Pie Table',
+  scatterTable: 'Scatter Table',
+  proTable: 'Chart',
   formula: 'Formula',
   insertFormula: 'Insert Formula',
   insertFlow: 'Insert Flow',
diff --git a/packages/cherry-markdown/src/locales/ru_RU.js b/packages/cherry-markdown/src/locales/ru_RU.js
index 6480c63..2d815da 100644
--- a/packages/cherry-markdown/src/locales/ru_RU.js
+++ b/packages/cherry-markdown/src/locales/ru_RU.js
@@ -45,15 +45,18 @@ export default {
   pdf: 'PDF',
   word: 'Word',
   table: 'Таблица',
-  'line-table': 'Строки в таблице',
-  'bar-table': 'Bar Table',
-  'radar-table': 'Radar Table',
-  'map-table': 'Map Table',
-  lineTable: 'Строки в таблице',
-  barTable: 'Bar Table',
-  radarTable: 'Radar Table',
-  mapTable: 'Map Table',
-  proTable: 'Chart Table',
+  'line-table': 'линия таблица',
+  'bar-table': 'бар стол',
+  'radar-table': 'радарный стол',
+  'map-table': 'таблица карты',
+  lineTable: 'линия таблица',
+  barTable: 'бар стол',
+  radarTable: 'радарный стол',
+  mapTable: 'таблица карты',
+  heatmapTable: 'таблица тепловой карты',
+  pieTable: 'стол для пирога',
+  scatterTable: 'точечная диаграмма таблица',
+  proTable: 'диаграмма',
   formula: 'Формула',
   insertFormula: 'Вставить формулу',
   insertFlow: 'Вставить поток',
diff --git a/packages/cherry-markdown/src/locales/zh_CN.js b/packages/cherry-markdown/src/locales/zh_CN.js
index 7fed0a2..4c06531 100644
--- a/packages/cherry-markdown/src/locales/zh_CN.js
+++ b/packages/cherry-markdown/src/locales/zh_CN.js
@@ -53,7 +53,10 @@ export default {
   barTable: '柱状表格', // 柱状表格
   radarTable: '雷达表格', // 雷达表格
   mapTable: '地图表格', // 地图表格
-  proTable: '图表表格', // 图表表格
+  heatmapTable: '热力图表格', // 热力图表格
+  pieTable: '饼图表格', // 饼图表格
+  scatterTable: '散点图表格', // 散点图表格
+  proTable: '图表', // 图表表格
   formula: '公式', // 公式
   insertFormula: '公式', // 公式
   insertFlow: '流程图', // 流程图
diff --git a/packages/cherry-markdown/src/sass/ch-icon.scss b/packages/cherry-markdown/src/sass/ch-icon.scss
index 896bed0..dba12f8 100644
--- a/packages/cherry-markdown/src/sass/ch-icon.scss
+++ b/packages/cherry-markdown/src/sass/ch-icon.scss
@@ -128,4 +128,11 @@
 .ch-icon-imgAlignCenter:before { content: "\EA85" }
 .ch-icon-imgAlignRight:before { content: "\EA86" }
 .ch-icon-imgAlignFloatLeft:before { content: "\EA87" }
-.ch-icon-imgAlignFloatRight:before { content: "\EA88" }
\ No newline at end of file
+.ch-icon-imgAlignFloatRight:before { content: "\EA88" }
+.ch-icon-insertLineChart:before { content: "\EA8A" }
+.ch-icon-insertBarChart:before { content: "\EA8B" }
+.ch-icon-insertRadarChart:before { content: "\EA8C" }
+.ch-icon-insertMapChart:before { content: "\EA8D" }
+.ch-icon-insertHeatmapChart:before { content: "\EA8E" }
+.ch-icon-insertPieChart:before { content: "\EA8F" }
+.ch-icon-insertScatterChart:before { content: "\EA90" }
\ No newline at end of file
diff --git a/packages/cherry-markdown/src/sass/icons/uEA8A-insertLineChart.svg b/packages/cherry-markdown/src/sass/icons/uEA8A-insertLineChart.svg
new file mode 100644
index 0000000..66fd550
--- /dev/null
+++ b/packages/cherry-markdown/src/sass/icons/uEA8A-insertLineChart.svg
@@ -0,0 +1 @@
+<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><path d="M84.450743 974.321371c0 23.434971-18.870857 42.364343-42.225372 42.364343C18.870857 1016.685714 0 997.756343 0 974.321371V42.364343C0 18.929371 18.870857 0 42.225371 0c23.354514 0 42.225371 18.929371 42.225372 42.364343v931.957028zM42.225371 1016.685714C18.870857 1016.685714 0 997.756343 0 974.321371c0-23.427657 18.870857-42.357029 42.225371-42.357028h939.549258c23.354514 0 42.225371 18.929371 42.225371 42.357028 0 23.434971-18.870857 42.364343-42.225371 42.364343H42.225371z m195.437715-277.6064a41.640229 41.640229 0 0 1-59.121372 0 41.962057 41.962057 0 0 1 0-59.304228l228.8128-229.544229a41.640229 41.640229 0 0 1 59.121372 0 41.962057 41.962057 0 0 1 0 59.304229l-228.820115 229.544228z m398.116571-61.293714a41.640229 41.640229 0 0 1-59.121371 0 41.962057 41.962057 0 0 1 0-59.304229l280.6784-281.570742a41.640229 41.640229 0 0 1 59.114057 0 41.962057 41.962057 0 0 1 0 59.304228L635.779657 677.792914z m-1.060571-59.172571a41.962057 41.962057 0 0 1 0 59.311542 41.640229 41.640229 0 0 1-59.114057 0l-167.855543-168.521142a41.962057 41.962057 0 0 1 0-59.311543 41.640229 41.640229 0 0 1 59.121371 0l167.848229 168.521143z" fill="#333333"></path></svg>
\ No newline at end of file
diff --git a/packages/cherry-markdown/src/sass/icons/uEA8B-insertBarChart.svg b/packages/cherry-markdown/src/sass/icons/uEA8B-insertBarChart.svg
new file mode 100644
index 0000000..f9c1e7b
--- /dev/null
+++ b/packages/cherry-markdown/src/sass/icons/uEA8B-insertBarChart.svg
@@ -0,0 +1 @@
+<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1754831922383" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2591" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><path d="M84.450743 981.635657c0 23.434971-18.870857 42.364343-42.225372 42.364343C18.870857 1024 0 1005.070629 0 981.635657V49.678629C0 26.243657 18.870857 7.314286 42.225371 7.314286c23.354514 0 42.225371 18.929371 42.225372 42.364343v931.957028zM42.225371 1024C18.870857 1024 0 1005.070629 0 981.635657c0-23.427657 18.870857-42.357029 42.225371-42.357028h939.549258c23.354514 0 42.225371 18.929371 42.225371 42.357028 0 23.434971-18.870857 42.364343-42.225371 42.364343H42.225371z m241.620115-214.059886c0 23.164343-18.7392 41.962057-41.837715 41.962057-23.0912 0-41.823086-18.797714-41.823085-41.962057V485.207771c0-23.164343 18.731886-41.962057 41.8304-41.962057 23.0912 0 41.8304 18.797714 41.8304 41.962057v324.732343z m200.177371 0c0 23.164343-18.7392 41.962057-41.8304 41.962057-23.0912 0-41.8304-18.797714-41.8304-41.962057V350.178743c0-23.164343 18.7392-41.962057 41.837714-41.962057 23.083886 0 41.823086 18.797714 41.823086 41.962057v459.761371z m400.493714 0c0 23.164343-18.731886 41.962057-41.8304 41.962057-23.0912 0-41.8304-18.797714-41.8304-41.962057V148.297143c0-23.164343 18.7392-41.962057 41.837715-41.962057 23.0912 0 41.823086 18.797714 41.823085 41.962057v661.642971z m-200.309028 0c0 23.164343-18.7392 41.962057-41.837714 41.962057-23.083886 0-41.823086-18.797714-41.823086-41.962057V681.2672c0-23.171657 18.7392-41.969371 41.8304-41.969371 23.0912 0 41.8304 18.797714 41.8304 41.969371v128.672914z" fill="#333333" p-id="2592"></path></svg>
\ No newline at end of file
diff --git a/packages/cherry-markdown/src/sass/icons/uEA8C-insertRadarChart.svg b/packages/cherry-markdown/src/sass/icons/uEA8C-insertRadarChart.svg
new file mode 100644
index 0000000..d5d7c70
--- /dev/null
+++ b/packages/cherry-markdown/src/sass/icons/uEA8C-insertRadarChart.svg
@@ -0,0 +1 @@
+<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1754831900930" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2153" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><path d="M527.228343 593.488457c-5.12 0.9216-10.371657 1.448229-15.754972 1.448229-6.955886 0-13.648457-0.789943-19.953371-2.362515l-81.656686 249.1392 219.765029-99.818057-102.4-148.406857zM363.52 848.018286l90.455771-275.924115a84.392229 84.392229 0 0 1-19.697371-28.1088l-252.847543 69.215086L363.52 848.010971z m170.276571-418.157715c5.376 1.440914 10.496 3.415771 15.36 5.909943L644.322743 354.596571 533.796571 186.624v243.229257zM181.423543 569.709714l246.418286-67.503543c0.526629-5.514971 1.704229-10.898286 3.284114-16.018285l-234.861714-155.501715-14.840686 239.030858z m519.753143-208.420571L974.628571 605.184l39.643429 6.2976A519.533714 519.533714 0 0 0 1024 511.802514c0-125.952-45.421714-241.2544-120.7808-330.430171L701.176686 361.296457z m182.345143 218.9312L668.884114 388.878629 580.922514 463.864686a85.650286 85.650286 0 0 1 13.919086 37.302857l288.687543 79.060114z m-391.753143-151.032686V154.975086L204.551314 285.769143l248.641829 164.695771a84.150857 84.150857 0 0 1 38.597486-21.277257z m161.879771 347.896686l-261.646628 118.857143-25.073372 107.168914A512.833829 512.833829 0 0 0 511.868343 1024c97.674971 0 188.913371-27.318857 266.503314-74.730057l-124.715886-172.178286z m38.597486-18.117486l121.168457 167.058286c83.104914-60.679314 147.3024-145.788343 181.957486-244.809143l-303.125943 77.750857z m-344.619886 137.237943L137.450057 625.276343l-115.397486 35.986286c45.816686 150.637714 159.246629 271.857371 304.837486 328.330971l20.743314-93.381486zM138.503314 581.412571l17.4592-277.504-84.545828-53.189485C25.994971 327.146057 0 416.453486 0 511.802514c0 37.302857 3.935086 73.808457 11.556571 108.873143l126.946743-39.263086z m808.565029 59.757715L589.063314 543.063771a84.041143 84.041143 0 0 1-23.5008 32.036572l101.4784 147.229257 280.027429-81.166629zM533.796571 110.058057L676.629943 327.021714l198.231771-176.64C786.907429 61.981257 666.916571 5.639314 533.920914 0v110.058057h-0.131657zM163.181714 258.464914l328.6016-149.723428V0C327.68 6.304914 183.530057 89.965714 94.2592 215.383771l68.922514 43.081143z" fill="#333333" p-id="2154"></path></svg>
\ No newline at end of file
diff --git a/packages/cherry-markdown/src/sass/icons/uEA8D-insertMapChart.svg b/packages/cherry-markdown/src/sass/icons/uEA8D-insertMapChart.svg
new file mode 100644
index 0000000..c6962c4
--- /dev/null
+++ b/packages/cherry-markdown/src/sass/icons/uEA8D-insertMapChart.svg
@@ -0,0 +1 @@
+<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1754831892156" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1955" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><path d="M42.664229 915.0464a42.613029 42.613029 0 0 1-42.6496-42.671543V100.264229a42.613029 42.613029 0 0 1 42.642285-42.671543 42.613029 42.613029 0 0 1 42.6496 42.671543V872.374857a42.613029 42.613029 0 0 1-42.642285 42.671543z m938.232685 53.343086a42.613029 42.613029 0 0 1-42.642285-42.671543V153.6a42.613029 42.613029 0 0 1 42.642285-42.678857 42.613029 42.613029 0 0 1 42.642286 42.678857v772.110629a42.613029 42.613029 0 0 1-42.642286 42.671542z m-654.767543-12.8a42.569143 42.569143 0 0 1-52.238628 30.134857L31.597714 918.784a42.605714 42.605714 0 0 1-30.120228-52.2752 42.569143 42.569143 0 0 1 52.245943-30.134857L296.009143 903.314286a42.605714 42.605714 0 0 1 30.120228 52.2752z m355.708343-97.214172c3.064686 23.332571-13.326629 44.807314-36.651885 47.872L296.411429 987.062857c-23.325257 3.064686-44.778057-13.341257-47.842743-36.673828-3.072-23.332571 13.326629-44.807314 36.644571-47.872l348.7744-80.815543c23.325257-3.072 44.785371 13.333943 47.850057 36.673828z m339.573029 85.211429c-7.328914 22.403657-31.451429 34.538057-53.840457 27.209143L631.727543 904.777143c-22.389029-7.336229-34.523429-31.473371-27.1872-53.877029 7.328914-22.403657 31.451429-34.538057 53.833143-27.209143l335.850057 66.011429c22.389029 7.336229 34.523429 31.473371 27.1872 53.877029zM326.531657 178.146743a42.569143 42.569143 0 0 1-52.245943 30.134857L32 141.333943a42.605714 42.605714 0 0 1-30.120229-52.2752A42.569143 42.569143 0 0 1 54.125714 58.923886l242.285715 66.940343a42.605714 42.605714 0 0 1 30.120228 52.2752z m355.84-97.221486c3.064686 23.332571-13.333943 44.807314-36.651886 47.872L296.945371 209.6128c-23.325257 3.072-44.778057-13.333943-47.842742-36.673829-3.072-23.332571 13.326629-44.807314 36.644571-47.872L634.389943 44.251429c23.456914-3.064686 44.909714 13.341257 47.981714 36.673828z m339.441372 85.211429c-7.328914 22.403657-31.451429 34.538057-53.840458 27.209143l-335.850057-66.011429c-22.381714-7.336229-34.516114-31.473371-27.1872-53.877029 7.328914-22.403657 31.451429-34.538057 53.840457-27.209142l335.850058 66.018742c22.381714 7.328914 34.647771 31.466057 27.1872 53.869715z m-598.791315 489.545143c0 47.133257 38.180571 85.343086 85.291886 85.343085 47.104 0 85.291886-38.209829 85.291886-85.3504 0-47.133257-38.180571-85.343086-85.284572-85.343085-47.111314 0-85.2992 38.209829-85.2992 85.343085zM164.205714 444.5696c0 46.789486 24.941714 90.016914 65.4336 113.408a130.801371 130.801371 0 0 0 130.874515 0 130.9696 130.9696 0 0 0 65.440914-113.408c0-72.323657-58.594743-130.947657-130.874514-130.947657-72.279771 0-130.874514 58.624-130.874515 130.947657z m352.906972-173.6192a42.656914 42.656914 0 0 0 42.642285 42.671543c23.552 0 42.6496-19.104914 42.6496-42.671543a42.656914 42.656914 0 0 0-42.642285-42.678857 42.656914 42.656914 0 0 0-42.6496 42.678857z m42.642285 173.6192a42.656914 42.656914 0 0 0 42.6496 42.678857c23.552 0 42.642286-19.104914 42.642286-42.678857a42.656914 42.656914 0 0 0-42.642286-42.671543 42.656914 42.656914 0 0 0-42.642285 42.671543z m124.2112 125.754514c0 47.133257 38.187886 85.343086 85.291886 85.343086 47.104 0 85.2992-38.209829 85.2992-85.343086 0-47.133257-38.187886-85.343086-85.2992-85.343085-47.104 0-85.284571 38.209829-85.284571 85.343085z" fill="#333333" p-id="1956"></path></svg>
\ No newline at end of file
diff --git a/packages/cherry-markdown/src/sass/icons/uEA8E-insertHeatmapChart.svg b/packages/cherry-markdown/src/sass/icons/uEA8E-insertHeatmapChart.svg
new file mode 100644
index 0000000..9835418
--- /dev/null
+++ b/packages/cherry-markdown/src/sass/icons/uEA8E-insertHeatmapChart.svg
@@ -0,0 +1 @@
+<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1754831878076" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1621" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><path d="M938.664229 0H85.335771C38.268343 0 0 38.268343 0 85.335771v853.328458C0 985.731657 38.268343 1024 85.335771 1024h853.328458c47.067429 0 85.335771-38.268343 85.335771-85.335771V85.335771C1024 38.136686 985.731657 0 938.664229 0zM369.737143 261.866057V86.674286h284.401371v175.199085h284.401372v175.199086H654.1312v326.933943h-0.533943V617.866971H369.2032v146.139429h-283.867429V617.457371h284.394058V442.2656H85.335771V261.866057h284.394058z m0 0h284.401371v175.199086H369.737143V261.866057z" fill="#333333" p-id="1622"></path></svg>
\ No newline at end of file
diff --git a/packages/cherry-markdown/src/sass/icons/uEA8F-insertPieChart.svg b/packages/cherry-markdown/src/sass/icons/uEA8F-insertPieChart.svg
new file mode 100644
index 0000000..77614a2
--- /dev/null
+++ b/packages/cherry-markdown/src/sass/icons/uEA8F-insertPieChart.svg
@@ -0,0 +1 @@
+<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1754831825008" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1264" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><path d="M481.440914 512.599771h-0.928914V0C212.297143 16.413257 0 239.147886 0 511.531886 0 794.594743 229.376 1024 512.402286 1024c142.109257 0 270.7456-57.921829 363.615085-151.332571L481.440914 512.592457z m378.1632-365.399771l8.009143-8.009143C783.945143 59.655314 676.125257 11.337143 563.104914 0.402286V407.04l296.4992-259.84z m61.915429 59.253029l-340.801829 298.276571 344.137143 312.151771a362.261943 362.261943 0 0 0 11.607772-16.420571C991.707429 718.657829 1024 620.032 1024 513.938286a510.529829 510.529829 0 0 0-102.473143-307.485257z" fill="#333333" p-id="1265"></path></svg>
\ No newline at end of file
diff --git a/packages/cherry-markdown/src/sass/icons/uEA90-insertScatterChart.svg b/packages/cherry-markdown/src/sass/icons/uEA90-insertScatterChart.svg
new file mode 100644
index 0000000..7e730f9
--- /dev/null
+++ b/packages/cherry-markdown/src/sass/icons/uEA90-insertScatterChart.svg
@@ -0,0 +1 @@
+<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><path d="M512 64C266.24 64 64 266.24 64 512s202.24 448 448 448 448-202.24 448-448S757.76 64 512 64zM256 512a64 64 0 1 1-64-64 64 64 0 0 1 64 64zM384 320a64 64 0 1 1-64-64 64 64 0 0 1 64 64zM320 704a64 64 0 1 1-64-64 64 64 0 0 1 64 64zM576 832a64 64 0 1 1-64-64 64 64 0 0 1 64 64zM768 768a64 64 0 1 1-64-64 64 64 0 0 1 64 64zM832 512a64 64 0 1 1-64-64 64 64 0 0 1 64 64zM768 256a64 64 0 1 1-64-64 64 64 0 0 1 64 64zM576 192a64 64 0 1 1-64-64 64 64 0 0 1 64 64z" fill="#333333"></path></svg>
\ No newline at end of file
-- 
2.50.1

