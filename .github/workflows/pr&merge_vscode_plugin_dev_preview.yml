name: PR Merge VscodePlugin Dev Preview

on:
  pull_request_target:
    types: [closed]
    paths:
      - "packages/vscodePlugin/**"

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  vscodePlugin-preview:
    # 不需要在fork仓库的pr中运行, 仅当pr合并时运行
    if: github.repository == 'Tencent/cherry-markdown' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'

      - name: Change Package Files
        run: |

          jq '."scripts"."build" = "yarn workspace cherry-markdown-core build"' package.json > temp.json && mv temp.json package.json
          jq '."scripts"."build:vscodePlugin" = "yarn workspace cherry-markdown build"' package.json > temp.json && mv temp.json package.json

          cd packages/cherry-markdown
          jq '.name = "cherry-markdown-core"' package.json > temp.json && mv temp.json package.json

          cd ../vscodePlugin
          jq '.dependencies["cherry-markdown"] = .dependencies["cherry-markdown-core"] | del(.dependencies["cherry-markdown"])' package.json > temp.json && mv temp.json package.json
          jq '.name = "cherry-markdown"' package.json > temp.json && mv temp.json package.json

      - name: Build VSCode Plugin
        run: |
          yarn global add vsce
          yarn --network-timeout 100000
          yarn build
          yarn build:vscodePlugin

          # 验证 .vsix 文件是否生成
          if [ ! -f ./packages/vscodePlugin/*.vsix ]; then
            echo "Error: .vsix file not found"
            exit 1
          fi

      - name: Upload Files
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: cherry-markdown_vscode_plugin_${{ github.sha }}
          path: ./packages/vscodePlugin/*.vsix
          retention-days: 60

      - name: Artifact Commit
        run: |
          echo "Artifact URL: ${{ steps.upload-artifact.outputs.artifact-url }}"

      - name: Extract package info
        id: extract-package
        run: |
          name=$(node -p "require('./packages/vscodePlugin/package.json').name")
          version=$(node -p "require('./packages/vscodePlugin/package.json').version")
          echo "name=$name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Post Artifact URL to PR
        uses: actions/github-script@v7
        env:
          ARTIFACT_URL: ${{ steps.upload-artifact.outputs.artifact-url }}
          NAME: ${{ steps.extract-package.outputs.name }}
          VERSION: ${{ steps.extract-package.outputs.version }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `📦 vscodePlugin 预览 (Preview) [${process.env.NAME}@${process.env.VERSION}](${process.env.ARTIFACT_URL})`
            });
