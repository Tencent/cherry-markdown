name: PR Merge Dev NPM Preview

# task:
# 1. 仅在主仓库中运行
# 2. 仅在pr合并时运行 (done)
# 3. 仅在pr合并到dev分支时运行
# 4. 当pr合并时，获取pr合并后的commit id (done)
# 5. 根据commit id 修改package.json中的版本号和名称 (done)
# 6. 发布到npm (done)
# 7. 发布成功后，将发布的版本号和链接回复到当前pr下
# 8. 发布成功后，将发布的版本号和链接回复到相关issue中(注意可能有没有issue和多个issue的情况)
# 9. 修改README.md 提示 dev版本需谨慎使用 (done)

on:
  pull_request_target:
    types:
      - closed

permissions:
  pull-requests: write
  issues: write

jobs:
  dev-deploy:
    # 不需要在fork仓库的pr中运行, 仅当pr合并时运行
    # if: github.repository == 'Tencent/cherry-markdown' && github.event.pull_request.merged == true
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # 检出仓库代码
      - name: Checkout repository
        uses:
          actions/checkout@v4

          # 获取PR合并后的SHA
      - name: Get merge commit SHA
        run: |
          if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
              SHORT_SHA=$(echo "${{ github.event.pull_request.merge_commit_sha }}" | cut -c1-7)
              echo "MERGE_COMMIT_SHA=$SHORT_SHA" >> "$GITHUB_ENV"
              echo "切割后的 SHA: $SHORT_SHA"
              echo "切割后的 MERGE_COMMIT_SHA: $MERGE_COMMIT_SHA"
          else
            echo "Not a merged PR, skipping"
          fi

      # 根据commit id 修改package.json中的版本号和名称
      # jq '.name="@cherry-markdown/preview-dev"' package.json > temp.json && mv temp.json package.json
      - name: dev package version and name
        run: |
          if [ -f package.json ]; then
            # 打印 SHORT_SHA
            echo "SHORT_SHA=$MERGE_COMMIT_SHA"

             # 获取当前版本号并添加后缀
              VERSION=$(node -p "require('./package.json').version")-dev.$MERGE_COMMIT_SHA
              echo "version=$VERSION" >> "$GITHUB_ENV"

            # 修改 package.json 中的 name 和 version，并检查 scripts 中是否存在 publish 属性，如果存在则移除
                jq --arg version "$VERSION" '
                  .name="test-cherry-markdown" |
                  .version=$version |
                  if .scripts.publish then del(.scripts.publish) else . end
                ' package.json > temp.json && mv temp.json package.json

              # 打印修改后的 name 和 version
              echo "Updated package.json:"
              cat package.json | jq '.name, .version'

              # 检查 scripts 中是否存在 publish 属性，如果存在则移除
              if jq -e '.scripts.publish' package.json > /dev/null; then
                 jq 'del(.scripts.publish)' package.json > temp.json && mv temp.json package.json
              fi
              
             else
            echo "package.json 文件不存在"
          fi

          # 重写或创建 README.md 文件
          echo -e '<p align="center"><img src="logo/new_logo.png" alt="cherry logo" width="50%"/></p>\n' > README.md
          echo -e '# Cherry Markdown Writer\n' >> README.md
          echo -e '> !WARNING\n This is a dev preview version of `Cherry Markdown`, please use it with caution. No responsibility for production versions.\n' >> README.md

      - name: Comment on related issues
        id: get-issues
        uses: actions/github-script@v7
        with:
          result-encoding: string
          retries: 3
          retry-exempt-status-codes: 400,401
          script: |
            let issue_array = [];

            // 添加issue到数组并去重
            const addIssueToArray = (newIssues) => {
              issue_array.push(...newIssues);
              issue_array = [...new Set(issue_array)];
            };

            try {
            // 获取pr的issue编号并且转换成数字数组
            const getIssueRegex =(issueText)=>{
              const issueRegex = /#(\d+)/g
              return Array.from(issueText.matchAll(issueRegex), match =>  parseInt(match[1], 10));
            };
            
            const comment = `发布成功`;

            // 发布评论到issue
            const createComment= async (issueNumbers) => {
            issueNumbers.forEach(async (issueNumber) => {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: comment
                });
              });
            };

            // 获取当前提交的pr信息[title,body]
            const { data: pullCommits } =
            await github.rest.pulls.get({
                owner:context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
            });
            const pullCommitsIssueTitleNumbers = getIssueRegex(pullCommits.title);
            addIssueToArray(pullCommitsIssueTitleNumbers);
            const pullCommitsIssueBodyNumbers = getIssueRegex(pullCommits.body);
            addIssueToArray(pullCommitsIssueBodyNumbers);

             console.log('pullCommits-title',pullCommitsIssueTitleNumbers);
             console.log('pullCommits-body',pullCommitsIssueBodyNumbers);

            // 获取当前pr的issue信息[body]
            const { data: listPrIssue } =
            await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
            });
            listPrIssue.forEach((item) => {
                const listPrIssueIssueNumbers = getIssueRegex(item.body);
                addIssueToArray(listPrIssueIssueNumbers);

                console.log('listPrIssue',item.body);
                console.log('listPrIssue',listPrIssueIssueNumbers);
            });

            // 获取当前pr的 review 信息[body]
            const { data: listReviewComments } = 
            await github.rest.pulls.listReviewComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
            });
            listReviewComments.forEach((item) => {
                const listReviewCommentsIssueNumbers = getIssueRegex(item.body);
                addIssueToArray(listReviewCommentsIssueNumbers);

                console.log('listReviewComments',item.body);
                console.log('listReviewComments',listReviewCommentsIssueNumbers);
            });

            createComment(issue_array);
             }catch(error){
               console.log('error',error);
            }

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: https://registry.npmjs.org/

      - name: yarn install
        run: |
          npm i yarn -g
          yarn install

      - name: build
        run: yarn build

      - name: npm publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
