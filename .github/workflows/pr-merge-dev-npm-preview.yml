name: PR Merge Dev NPM Preview

# task:
# 1. 1仅在主仓库中运行
# 2. 仅在pr合并时运行 (done)
# 3. 仅在pr合并到dev分支时运行
# 4. 当pr合并时，获取pr合并后的commit id (done)
# 5. 根据commit id 修改package.json中的版本号和名称 (done)
# 6. 发布到npm (done)
# 7. 发布成功后，将发布的版本号和链接回复到当前pr下
# 8. 发布成功后，将发布的版本号和链接回复到相关issue中(注意可能有没有issue和多个issue的情况)
# 9. 修改README.md 提示 dev版本需谨慎使用 (done)

on:
  pull_request_target:
    types:
      - closed

permissions:
  pull-requests: write
  issues: write

jobs:
  dev-deploy:
    # 不需要在fork仓库的pr中运行, 仅当pr合并时运行
    # if: github.repository == 'Tencent/cherry-markdown' && github.event.pull_request.merged == true
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # 检出仓库代码
      - name: Checkout repository
        uses:
          actions/checkout@v4

          # 获取PR合并后的SHA
      - name: Get merge commit SHA
        run: |
          if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
              SHORT_SHA=$(echo "${{ github.event.pull_request.merge_commit_sha }}" | cut -c1-7)
              echo "MERGE_COMMIT_SHORT_SHA=$SHORT_SHA" >> "$GITHUB_ENV"
    
          else
            echo "Not a merged PR, skipping"
          fi

      # 根据commit id 修改package.json中的版本号和名称
      # jq '.name="@cherry-markdown/preview-dev"' package.json > temp.json && mv temp.json package.json
      - name: dev package version and name
        run: |
          if [ -f package.json ]; then

             # 获取当前版本号并添加 merge commit SHA
             VERSION=$(node -p "require('./package.json').version")-dev.${{ env.MERGE_COMMIT_SHORT_SHA }}

             # 设置环境变量
             echo "PACKAGE_VERSION=$VERSION" >> "$GITHUB_ENV"
             package_name="test-cherry-markdown"
             echo "PACKAGE_NAME=$package_name" >> "$GITHUB_ENV"

             # 打印当前版本号
              echo "Current version: $VERSION"

            # 修改 package.json 中的 name 和 version，并检查 scripts 中是否存在 publish 属性，如果存在则移除
              jq --arg package_name "$PACKAGE_NAME" --arg package_version "$PACKAGE_VERSION" '
                  .name=$package_name |
                  .version=$package_version |
                  if .scripts.publish then del(.scripts.publish) else . end
                ' package.json > temp.json && mv temp.json package.json

              # 打印修改后的 name 和 version
              echo "Updated package.json:"
              cat package.json | jq '.name, .version'

              echo "$PACKAGE_VERSION"

              # 检查 scripts 中是否存在 publish 属性，如果存在则移除
              if jq -e '.scripts.publish' package.json > /dev/null; then
                 jq 'del(.scripts.publish)' package.json > temp.json && mv temp.json package.json
              fi
              
             else
            echo "package.json 文件不存在"
          fi

          # 重写或创建 README.md 文件
          echo -e '<p align="center"><img src="logo/new_logo.png" alt="cherry logo" width="50%"/></p>\n' > README.md
          echo -e '# Cherry Markdown Writer\n' >> README.md
          echo -e '> !WARNING\n This is a dev preview version of `Cherry Markdown`, please use it with caution. No responsibility for production versions.\n' >> README.md
